#needs circle
#needs arrowheads


|** dbout: [hot 0   \ p e .> { 0 }   \ p .> 0 ] <<
dbout: [hot 0   \ p e .> { stdout << e  0 }   \ p .> 0 ] <<

Niter: '40

{
 
  pth: [immerse [circle 1cm]]
/**
  pth: [[range '0 '3].foldl
   \ pile e .>  { sl: [pth0 e*1.]  pile--(+sl.rv*sl.rT)<(sl.p + 0.1mm*[random3D])>(+sl.v*sl.T)
   EMPTYPATH3D]--cycle
**/
  @<< view [] [stroke pth]

  timer: HotTimer <<
  @width: 0.2bp
  |
  [[range '1 Niter].foldl
   \ pile e .>
   {
    p: 1.4cm * [random3D]
|**    tim: HotTimer <<
    sl: [continuous_approximator pth p]
|**    tim;
    a: (p - sl.p) /_ sl.T
    dbout << [sprintf `%g°¢n´ a / 1° ]
|**          << [sprintf `, %gs¢n´ tim]
    @<< view [] ( @stroking:[rgb 0 [min 1 [abs a - 90°]/0.1°] 0] | [stroke p--sl.p] )
    pile
   }
   VOID
  ]
  timer;
  stdout << [sprintf `Average time: %gs¢n´  timer / Niter]
}

randPath: \ n .>
 [[range '1 n].foldl
  \ pile e .>  { h: 3mm*[random3D]   pile--(+~h)<(1cm*[random3D])>(+h) }
  EMPTYPATH3D]--cycle

{
  sh: [shift (3cm,0cm,0cm)]
  pth: sh [] [randPath '10]
  @<< view [] [stroke pth]
  @<< @stroking:RGB_RED | ( view [] [stroke controlling [] pth] )

  timer: HotTimer <<
  @width: 0.2bp
  |
  [[range '1 Niter].foldl
   \ pile e .>
   {
    p: sh [] 1.4cm * [random3D]
|**    tim: HotTimer <<
    sl: [continuous_approximator pth p]
|**    tim;
    a: (p - sl.p) /_ sl.T
    dbout << [sprintf `%g°¢n´ a / 1° ]
|**          << [sprintf `, %gs¢n´ tim]
    @<< view [] ( @stroking:[rgb 0 [min 1 [abs a - 90°]/0.1°] 0] | [stroke p--sl.p] )
    pile
   }
   VOID
  ]
  timer;
  stdout << [sprintf `Average time: %gs¢n´  timer / Niter]
}
