<!-- This file is part of Shapes.                                           -->
<!--                                                                        -->
<!-- Shapes is free software: you can redistribute it and/or modify         -->
<!-- it under the terms of the GNU General Public License as published by   -->
<!-- the Free Software Foundation, either version 3 of the License, or      -->
<!-- any later version.                                                     -->
<!--                                                                        -->
<!-- Shapes is distributed in the hope that it will be useful,              -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of         -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          -->
<!-- GNU General Public License for more details.                           -->
<!--                                                                        -->
<!-- You should have received a copy of the GNU General Public License      -->
<!-- along with Shapes.  If not, see <http://www.gnu.org/licenses/>.        -->
<!--                                                                        -->
<!-- Copyright 2008 Henrik Tidefelt                                         -->

<section id="syntax/atoms">
<title>Atoms</title>
<top>
<p>Here the different scanner tokens that directly define values are described.</p>
</top>

<section id="syntax/atoms/floats">
<title>Floats</title>
<body>
<p>
	<syntax-table>
		<tr> <td><syntax name="basic-float" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Float" /></td></tr>
		<tr> <td><syntax name="basic-float" /></td> <td><bnf>→</bnf></td> <td><lexerregexp>[~]?[0-9]+([.][0-9]*)?([*]^[~]?[0-9]+)?</lexerregexp></td></tr>
		<tr> <td><syntax name="float" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Float" /></td></tr>
		<tr> <td><syntax name="float" /></td> <td><bnf>→</bnf></td> <td><inline><syntax name="basic-float" /> <bnf>|</bnf> <syntax name="basic-float" /><lexerregexp>("°"|"^^")</lexerregexp></inline></td></tr>
	</syntax-table>
</p>
<p>
	A float begins with an optional tilde sign which, when present, indicates that the number is negative.  Then follows one or more decimal digits, an optional decimal point, and an optional sequence of decimal digits.  An optional base 10 exponent can then be appended, prefixed with the sequence <inline>*^</inline>, negative exponents indicated using the tilde sign.  Finally, a degree sign can be appended, effectively multiplying the preceding float by π/180.  Examples are given below.
	<token-example-table>
		<head>
			<tr> <td>Token</td> <td>Valid float?</td> </tr>
		</head>
		<body>
			<tr> <td><inline>13</inline></td> <td>Yes (= 13)</td> </tr>
			<tr> <td><inline>~13</inline></td> <td>Yes (= -13)</td> </tr>
			<tr> <td><inline>2.</inline></td> <td>Yes (= 2.0)</td> </tr>
			<tr> <td><inline>~3.14</inline></td> <td>Yes (= -3.14)</td> </tr>
			<tr> <td><inline>~180°</inline></td> <td>Yes (= -3.14159...)</td> </tr>
			<tr> <td><inline>5*^~3°</inline></td> <td>Yes, (= 0.005*π/180)</td> </tr>
			<tr> <td><inline>90^^</inline></td> <td>Yes, (= 0.5*π)</td> </tr>
			<tr> <td><inline>.609</inline></td> <td>No (missing integer part)</td> </tr>
			<tr> <td><inline>-3.1</inline></td> <td>No (binary minus sign)</td> </tr>
			<tr> <td><inline>1 000</inline></td> <td>No (spaces are not allowed)</td> </tr>
			<tr> <td><inline>180 °</inline></td> <td>No (space is not allowed)</td> </tr>
		</body>
	</token-example-table>
</p>

<note>
	<p>Many users complain that they cannot type the degree character, but this useful character has been present on all keyboard layouts that I (Henrik) has encountered.  To you Emacs users, note that you must type <em>ctrl-q</em> (that is, pressing the <em>q</em> key while holding down the <em>control</em> key), before you can use the <em>meta</em> key as a modifier.  The following table gives a few examples of where the degree character can be found:
		<loose-table>
			<tr> <th>OS</th> <th>Keyboard layout</th> <th>Key sequence</th> </tr>
			<tr> <td>Mac OS X</td> <td>U.S.</td> <td>alt-shift-8</td> </tr>
			<tr> <td>Cent OS</td> <td>U.S.</td> <td>alt-0</td> </tr>
			<tr> <td>Mac OS X</td> <td>Swedish — Pro</td> <td>shift-§</td> </tr>
			<tr> <td>Mac OS X</td> <td>Tiddish (see below)</td> <td>shift-§</td> </tr>
		</loose-table>
	</p>
	<p>Note that, on the Mac OS U.S. layout, the key sequence <em>alt-0</em> yields the <em>masculine ordinal indicator</em> (º) which looks very similar to the degree sign (°) — don't confuse the two!</p>
	<p>The Tiddish layout is my own keyboard layout, giving at the same time convenient access to Swedish characters on a Swedish keyboard, convenient access to frequent characters used in programming, and big set of logically organized dead key sequences for access to accented characters and more.</p>
</note>

<p>An alternative way to create negative numbers is to use the unary negation expression, for example: <inline>(-3.1)</inline>.  However, note that the parentheses are mandatory, thus reducing readability compared to the tilde sign alternative.</p>
</body>
</section>


<section id="syntax/atoms/lengths">
<title>Lengths</title>
<body>
<p>
	<syntax-table>
		<tr> <td><syntax name="length" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Length" /></td></tr>
		<tr> <td><syntax name="length" /></td> <td><bnf>→</bnf></td> <td><inline><syntax name="basic-float" /><bnf>;</bnf><syntax name="length-unit" /></inline></td></tr>
	</syntax-table>
</p>
<p>Length tokens are formed by a float (not ending with the degree sign) followed by the name of a length.  New lengths can be defined as multiples of existing ones, as long as all definitions agree.  Length definitions are evaluated by the program scanner, which makes them very efficient in use.  The effect of a length unit defined as a more complicated expression in existing lengths, say one centimeter plus one inch, must be simulated by storing the length in a variable, which is then multiplied with a float to denote a length in this new unit.</p>

<p>The following lengths are provided by the system: <lengthunit>mm</lengthunit>, <lengthunit>cm</lengthunit>, <lengthunit>m</lengthunit>, <lengthunit>bp</lengthunit> (big point, also called <em>PostScript point</em>), and <lengthunit>in</lengthunit>.</p>

<p>
	<token-example-table>
		<head>
			<tr> <td>Token</td> <td>Valid length?</td> </tr>
		</head>
		<body>
			<tr> <td><inline>2.5cm</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>2.5pt</inline></td> <td>No (unless the unit <lengthunit>pt</lengthunit> is defined)</td> </tr>
			<tr> <td><inline>~3mm</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>3 mm</inline></td> <td>No (space not allowed)</td> </tr>
			<tr> <td><inline>3*^~3m</inline></td> <td>Yes (<physical><scalar>3</scalar><unit>mm</unit></physical>)</td> </tr>
			<tr> <td><inline>180°mm</inline></td> <td>No (degree sign not allowed)</td> </tr>
		</body>
	</token-example-table>
</p>

<p>
	A new unit is defined using the following syntax, which must appear <em>at the beginning of a line</em>:
<pre>
##unit <lengthunit class="replacable">new_unit</lengthunit> = <syntax name="length" />
</pre>
</p>
<p>
	The point used by <str-TeX /> is taken as an example.  The new unit will be called <lengthunit>tex</lengthunit>:
<pre>
##unit tex = 0.996264009963bp
</pre>
</p>
</body>
</section>


<section id="syntax/atoms/special-lengths">
<title>Special units of length</title>
<body>
<p>Special units of lengths are used when constructing smooth paths.  Then, it is often desirable not to have to provide the distance to control points in terms of absolute distances, but one would rather specify the distance relative to the distance between the first and final interpolation point, and the angles from the first and final interpolation points to the intermediate control points.</p>

<p>The most frequent use of special units of lengths is to assign the dynamic variable <dynvar name="defaultunit" />, see <a id="syntax/misc-expr/path-constr">path construction</a>.</p>

<p>
	Special lengths can be viewed as a function taken from a particular (parameterized) set of functions.  There are only eight special units of lengths, and currently, there is no support for defining new ones.  Here is the list of them all:
	<loose-table>
		<tr align="left"> <th>Name</th> <th>Distance</th> <th>No inflexion</th> <th>Circelish</th> <th>Correction</th> </tr>
		<tr> <td><lexerregexp>%[D0]</lexerregexp></td> <td>√</td> <td></td> <td></td> <td></td> </tr>
		<tr> <td><lexerregexp>%[C1]</lexerregexp></td> <td>√</td> <td></td> <td>√</td> <td></td> </tr>
		<tr> <td><lexerregexp>%[M2]</lexerregexp></td> <td>√</td> <td></td> <td></td> <td>√</td> </tr>
		<tr> <td><lexerregexp>%[F3]</lexerregexp></td> <td>√</td> <td></td> <td>√</td> <td>√</td> </tr>
		<tr> <td><lexerregexp>%[d4]</lexerregexp></td> <td>√</td> <td>√</td> <td></td> <td></td> </tr>
		<tr> <td><lexerregexp>%[c5]</lexerregexp></td> <td>√</td> <td>√</td> <td>√</td> <td></td> </tr>
		<tr> <td><lexerregexp>%[m6]</lexerregexp></td> <td>√</td> <td>√</td> <td></td> <td>√</td> </tr>
		<tr> <td><lexerregexp>%[f7]</lexerregexp></td> <td>√</td> <td>√</td> <td>√</td> <td>√</td> </tr>
		<tr> <td><lexerregexp>%[i9]</lexerregexp></td> <td></td> <td>√</td> <td></td> <td></td> </tr>
	</loose-table>
</p>
<p>The meaning of the columns is the following.  If there is a check mark in the <em>Distance</em> column, then the distance between the first and last interpolation point is used as a base length.  If there is a check mark in the <em>Circelish</em> column, then the base length is multiplied by a factor based on the near angle, in such a way that circles are approximated well.  If there is a check mark under <em>Correction</em>, a correction factor is applied based on the difference between the near angle and the far angle; if both angles are the same, there is no correction.  If there is a check mark in the <em>No inflexion</em> column, then the distance to the intermediate control point is truncated to avoid inflexions, if necessary.  The unit which is not based on the distance between the first and last interpolation point is based on the inflexion limit instead.</p>
<remark>
<p>I know that the description of the special lengths is really bad.  I hope it will be better once I start documenting path construction in general.</p>
</remark>

<p>
	For instance, the following approximates a quarter of a circle well:
<pre>
<![CDATA[•page << [stroke (0cm,1cm)>(1%C^0°)--(1%C^90°)<(1cm,0cm)]]]>
</pre>
</p>
</body>
</section>

<section id="syntax/atoms/strings">
<title>Strings</title>
<body>
<p>The <named-type name="String" /> construction syntax in <str-Shapes /> gives three alternatives.  Frist, there is a pretty one (called <em>normal string</em>), with one-character pairwise delimiters that nest, then, there is the ASCII-fallback with two-character delimiters that do not nest (called <em>poor man's string</em>), and finally there is one for arbitrary data (called <em>data string</em>).</p>

<p>The reason why is has to be so complicated is that the normal string is optimized to allow <str-TeX /> strings to be entered as plain as possible, which rules out any reasonable choice of escape character.  Hence, the normal string cannot contain arbitrary strings of characters (since at least the terminating sequence would have to be escapable).  Note, though, that the poor man's string can contain any <em>single</em> Unicode character.  Hence, in theory, there is a way to at least enter any Unicode string as a string concatenation of individual characters, but clearly this is not an acceptable solution, and why there are data strings as well.</p>

<p>
	The normal strings are delimited by the grave and acute accent, respectively (<lexerregexp>`</lexerregexp>…<lexerregexp>´</lexerregexp>).  Each delimiter can be extended to include a line break on the inside.  Other line breaks are part of the string literal.  The delimiting accents nest (no optional line breaks this time).  It is recommended that strings are entered in one of two ways among all ways to deal with line breaks.  The first alternative is to enter line breaks literally and using the optional line breaks at the delimiters.  The other alternative, of course, is to skip the line breaks at the delimiters and use string concatenation to insert line breaks inside the string (the data strings provide a compact way of constructing the line break).  See the following examples:
	<token-example-table>
		<head>
			<tr> <td>Token</td> <td>Valid string?</td> </tr>
		</head>
		<body>
			<tr> <td><inline>`Hi there´</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>`Shapes string: `Hi there´´</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>`Quasiquotation: `(0 1 ,(1+1))´</inline></td> <td>No (Unbalanced delimiter)</td> </tr>
			<tr> <td><inline>`Here's a formula: $(1+x)^{2}$´</inline></td> <td>Yes</td> </tr>
			<tr> <td><pre>
`
Dear Shaper,

Multi-line...
´
</pre></td> <td>Yes (contains just one line break)</td> </tr>
			<tr> <td><pre>
`Dear Shaper,

Multi-line...´
</pre></td> <td>Yes, but not recommended</td> </tr>
		</body>
	</token-example-table>
</p>

<note>
	<p>The situation when normal strings fail (unmatched accents) is, albeit uncommon, present in standard use of <str-TeX />.  Recall that the left double quote is entered as <inline>``</inline> in <str-TeX />, but matched by <inline>''</inline>.  To deal with this, one may either resort to the poor man's string when the situation occurs, or replace the ugly two-character sequences by their proper Unicode representations instead.  It is recommended to stick with normal strings, to avoid the bulkiness of the poor man's strings.</p>
</note>

<p>The syntax of a poor man's string differs in two ways from normal strings.  First, they are delimited using <lexerregexp>"(\&quot;"</lexerregexp> and <lexerregexp>"\&quot;)"</lexerregexp>.  Second, the delimiters no not nest (but they have the same optional line break on the inside).  Except that the delimiters are a bit bulky, this provides a very powerful way to enter most Unicode strings.  There is still a technical need to be able to enter <em>any</em> Unicode string, and it is a bit inconvenient to have to enter line breaks literally.
	<token-example-table>
		<head>
			<tr> <td>Token</td> <td>Valid string?</td> </tr>
		</head>
		<body>
			<tr> <td><inline>("´")</inline></td> <td>Yes (cannot be entered conveniently using normal or data strings)</td> </tr>
		</body>
	</token-example-table>
</p>

<note>
	<p>The bulkiness of the poor man's string delimiters is not only a burden; it is also what makes the syntax so powerful.  The only Unicode sequence it cannot handle is <inline>&quot;)</inline>, which gives an advantage over the normal string, where the acute accent can be entered only if it is preceded by a matching grave accent.  However, because of the bulkiness, it is recommended to use the poor man's string only if it is required due to the presence of unmatched accents, or because the user don't know how to type the accent characters.</p>
</note>

<p>The string syntax for data strings is made up of sections, alternating between <em>plain</em> and <em>escape</em> mode, starting in <em>escape</em> mode.  The whole string begins with the sequence <lexerregexp>"\&quot;{"</lexerregexp>.  In <em>escape</em> mode, pairs in the form <lexerregexp>[A-F0-9]{2}</lexerregexp> is a base-16 representation one unsigned byte, the range <lexerregexp>[a-z]</lexerregexp> is reserved for named characters (currently, <lexerregexp>n</lexerregexp> is the newline character, and <lexerregexp>t</lexerregexp> is the tab), the characters <lexerregexp>[ \t\n]</lexerregexp> are ignored, <lexerregexp>"}"</lexerregexp> terminates the string, <lexerregexp>"{"</lexerregexp> switches to <em>plain</em> mode, and no other characters are allowed.  In <em>plain</em> mode, any character in the range <lexerregexp>[ -z]</lexerregexp> represents itself, the <lexerregexp>[\n]</lexerregexp> is ignored, <lexerregexp>"}"</lexerregexp> switches back to <em>escape</em> mode, and no other characters are allowed.</p>

<note>
	<p>With the data strings, it is possible to enter strings that are not valid <str-UTF-8 /> data.  It is permitted to put such data in strings, but note that they are not valid input to most functions accepting string arguments.  Since arbitrary data cannot be handled as a null-terminated sequence of bytes, <str-Shapes /> uses both a trailing null byte and a separate byte count.</p>
</note>

<p>Here are some examples:
	<token-example-table>
		<head>
			<tr> <td>Token</td> <td>Valid string?</td> </tr>
		</head>
		<body>
			<tr> <td><inline>&quot;{{Hi there!}}</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>&quot;{{The tilde (}7E{) cannot be written in plain mode.}}</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>&quot;{7EAE00FF}</inline></td> <td>Yes (four bytes)</td> </tr>
			<tr> <td><inline>&quot;{A0}</inline></td> <td>Yes (the newline character)</td> </tr>
			<tr> <td><inline>&quot;{n}</inline></td> <td>Yes (same as <inline>&quot;{A0}</inline>)</td> </tr>
			<tr> <td><pre>
&quot;{
7EAE 00FF
8E7E ABCD
}</pre></td> <td>Yes (eight bytes)</td> </tr>
			<tr> <td><inline>&quot;{1234 ABC}</inline></td> <td>No (the <inline>C</inline> needs another hex digit)</td> </tr>
			<tr> <td><inline>&quot;{7e}</inline></td> <td>No (the <inline>e</inline> should be upper case)</td> </tr>
			<tr> <td><inline>&quot;{7E{plain text{7E}}}</inline></td> <td>No (should be <inline>&quot;{7E{plain text}7E}</inline>)</td> </tr>
			<tr> <td><pre>
&quot;{{No trailing newline.
}}</pre></td> <td>Yes (line break is ignored)</td> </tr>
		</body>
	</token-example-table>
</p>

</body>
</section>

<section id="syntax/atoms/booleans">
<title>Booleans</title>
<body>
<p>
	<syntax-table>
		<tr> <td><syntax name="boolean" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Boolean" /></td></tr>
		<tr> <td><syntax name="boolean" /></td> <td><bnf>→</bnf></td> <td><inline>true <bnf>|</bnf> false</inline></td></tr>
	</syntax-table>
</p>

<p>
	The valid Booleans are listed below.
	<token-example-table>
		<head>
			<tr> <th>Token</th> <th>Valid Boolean?</th> </tr>
		</head>
		<body>
			<tr> <td><inline>false</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>true</inline></td> <td>Yes</td> </tr>
		</body>
	</token-example-table>
</p>
</body>
</section>

<section id="syntax/atoms/integers">
<title>Integers</title>
<body>
<p>
	<syntax-table>
		<tr> <td><syntax name="integer" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Integer" /></td></tr>
		<tr> <td><syntax name="integer" /></td> <td><bnf>→</bnf></td> <td><lexerregexp>'</lexerregexp><bnf>;(</bnf> <syntax name="integer-2" /> <bnf>|</bnf> <syntax name="integer-10" /> <bnf>|</bnf> <syntax name="integer-16" /> <bnf>)</bnf></td></tr>
		<tr> <td><syntax name="integer-2" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Integer" /></td></tr>
		<tr> <td><syntax name="integer-2" /></td> <td><bnf>→</bnf></td> <td><lexerregexp>0b[01]+</lexerregexp></td></tr>
		<tr> <td><syntax name="integer-10" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Integer" /></td></tr>
		<tr> <td><syntax name="integer-10" /></td> <td><bnf>→</bnf></td> <td><lexerregexp>[~]?[0-9]+</lexerregexp></td></tr>
		<tr> <td><syntax name="integer-16" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Integer" /></td></tr>
		<tr> <td><syntax name="integer-16" /></td> <td><bnf>→</bnf></td> <td><lexerregexp>0x[0-9A-F]+</lexerregexp></td></tr>
	</syntax-table>
</p>

<p>
	Integers are entered with radix 10, 16, or 2, and begin with an apostrophe.  The tilde sign is placed after the apostrophe for negative values, and is only allowed with radix 10.  Examples:
	<token-example-table>
		<head>
			<tr> <th>Token</th> <th>Valid Integer?</th> </tr>
		</head>
		<body>
			<tr> <td><inline>'13</inline></td> <td>Yes (= 13)</td> </tr>
			<tr> <td><inline>'~5</inline></td> <td>Yes (= -5)</td> </tr>
			<tr> <td><inline>'0xFF</inline></td> <td>Yes (= 255)</td> </tr>
			<tr> <td><inline>'0b110</inline></td> <td>Yes (= 6)</td> </tr>
			<tr> <td><inline>'~0xFF</inline></td> <td>No (negative integers must be entered with radix 10)</td> </tr>
			<tr> <td><inline>(-'0xFF)</inline></td> <td>Yes, but this is an expression, not a token.</td> </tr>
		</body>
	</token-example-table>
</p>
</body>
</section>

<section id="syntax/atoms/identifiers">
<title>Identifiers</title>
<body>
<p>
	<syntax-table>
		<tr> <td><syntax name="identifier" class="new" /></td> <td><bnf>→</bnf></td> <td><lexerregexp>{Letter}({Letter}|[0-9])*</lexerregexp></td></tr>
	</syntax-table>
</p>

<p>Although identifiers <em>by themselves</em> do not denote values, they are introduced here since they are needed in the definition of symbols below.</p>

<p>An identifier is made up by one or more of the characters a-z, A-Z, 0-9, the underscore, and the question mark.  However, it must not begin with a number, and if it begins by the underscore, the second character must not be a number.</p>

<p>
	<token-example-table>
		<head>
			<tr> <th>Token</th> <th>Valid identifier?</th> </tr>
		</head>
		<body>
			<tr> <td><inline>cool?</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>A_1_2</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>__cplusplus</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>π</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>3cm</inline></td> <td>No (this begins with a digit and is a length)</td> </tr>
			<tr> <td><inline>2π</inline></td> <td>No (this begins with a digit and isn't even a length)</td> </tr>
			<tr> <td><inline>_3abc</inline></td> <td>No (digit after underscore in first position)</td> </tr>
		</body>
	</token-example-table>
</p>
</body>
</section>

<section id="syntax/atoms/dynamic-variables">
<title>Dynamic variables</title>
<body>
<p>
	<syntax-table>
		<tr> <td><syntax name="dyn-var" class="new" /></td> <td><bnf>→</bnf></td> <td><inline><lexerregexp>@</lexerregexp><syntax name="identifier" /></inline></td></tr>
	</syntax-table>
</p>
</body>
</section>

<section id="syntax/atoms/state-ref">
<title>State references</title>
<body>
<p>
	Note that state references are not expressions:
	<syntax-table>
		<tr> <td><syntax name="state" class="new" /></td> <td><bnf>→</bnf></td> <td><inline><syntax name="lex-state" /> <bnf>|</bnf> <syntax name="dyn-state" /></inline></td></tr>
		<tr> <td><syntax name="lex-state" class="new" /></td> <td><bnf>→</bnf></td> <td><inline><lexerregexp>[•#]</lexerregexp><syntax name="identifier" /></inline></td></tr>
		<tr> <td><syntax name="dyn-state" class="new" /></td> <td><bnf>→</bnf></td> <td><inline><lexerregexp>@[•#]</lexerregexp><syntax name="identifier" /></inline></td></tr>
	</syntax-table>
</p>
</body>
</section>

<section id="syntax/atoms/symbols">
<title>Symbols</title>
<body>
<p>
	<syntax-table>
		<tr> <td><syntax name="symbol" class="new" /></td> <td><bnf>::</bnf></td> <td><named-type name="Symbol" /></td></tr>
		<tr> <td><syntax name="symbol" /></td> <td><bnf>→</bnf></td> <td><inline>'<syntax name="identifier" /></inline></td></tr>
	</syntax-table>
	Note that there must not be any whitespace after the apostrophe.
</p>

<p>
	Symbols are entered as the apostrophe followed by an identifier:
	<token-example-table>
		<head>
			<tr> <th>Token</th> <th>Valid symbol?</th> </tr>
		</head>
		<body>
			<tr> <td><inline>'foo</inline></td> <td>Yes</td> </tr>
			<tr> <td><inline>'2dup</inline></td> <td>No (<inline>2dup</inline> is not an identifier)</td> </tr>
			<tr> <td><inline>'28</inline></td> <td>No, this is an integer</td> </tr>
		</body>
	</token-example-table>
</p>
</body>
</section>

</section><!-- end of syntax-atoms -->
