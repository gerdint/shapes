|***************************************************************************
|** This is a file that is used to generate a particular form of the logo.
|**
|** This form of the logo has bent text above and below, and looks rather
|** different from the other logos.  It can be used in printed material like
|** theses, course material, and books.  (The other logos are used in
|** presentations and posters.)
|***************************************************************************
##author Henrik Tidefelt

##needs rtlogo_elements
##needs circle

/** This is the text size, and everything related to the text should be in this unit so that it
 ** becomes easy to change the size of the text circle relative to the regulator inside.
 **/
##unit t = 10bp
##unit rR = 13mm |** This is the size given to makeRegulator function.

smallFont: @text_font:FONT_HELVETICA_BOLD & @text_size:1t & @text_horizontalscaling:1.0

|** The bent text is drawn along circular arcs, and we put the text in contact with the regulator's box at
|** the center coordinate.
circleCenter: (0,0.92rR)
innerRadius: 4.4t
charHeight: [ymax [bbox smallFont | ( newText << `X´ )]]
outerRadius: innerRadius + charHeight
ballSpace: 0.22
graySep: 0.3t


•page << @nonstroking:lightGray | [fill [shift circleCenter][][circle outerRadius + graySep]]
•page << @nonstroking:darkGray | [fill [shift circleCenter][][circle innerRadius - graySep]]


  @stroking:GRAY_WHITE
& @nonstroking:GRAY_WHITE
|
{
  /** Recall where this places the regulator...
   **/
  [makeRegulator 1rR •page]
}

{
  /** This is the upper banner.
   ** Since the text is placed on the outside of the circle, no special kerning should be needed.
   **/

  text: smallFont | [kerning `•´ ~ballSpace [kern `REGLERTEKNIK´] ~ballSpace `•´ ~ballSpace [kern `AUTOM´] 0.08 `A´ 0.13 [kern `TIC CONTROL´] ~ballSpace `•´]
  baseline: [shift circleCenter] [] [rotate 90° + 0.5*[xmax [bbox ( newText << text )]]/innerRadius] [] reverse [] [circle innerRadius]

|**  •page << @width:0bp & @stroking:RGB_RED | [stroke baseline]
|**  •page << @width:0bp | [stroke (~1r,[baseline 0].p.y)--(1r,(+0r))]

  /** At the time of writing, there is no abstraction for placing text along a path, but this is the
   ** standard way of doing it.
   **/
  •page <<
   [text.list.foldl
      \ pile distChar .>
       {
         c: ( newText << distChar.cdr )
         sl: [baseline distChar.car + 0.5*[xmax [bbox c]]]
         pile
         &
         [[shift sl.p]()[rotate [angle sl.T]] [centerx c] ]
       }
      null]
}

{
  /** This is the lower banner.
   ** Since the text is placed on the inside of the circle, some negative kerning must be used.
   **/
  stdkern: charHeight/outerRadius

  text: smallFont | ( @text_characterspacing:stdkern*@text_size | [kerning [kern `LINK´] 0.13 `Ö´ 0.03 [kern `PING´]] )

  baseline: [shift circleCenter] [] [rotate ~90° - 0.5*([xmax [bbox (newText << text)]])/outerRadius] [] [circle outerRadius]

  /** At the time of writing, there is no abstraction for placing text along a path, but this is the
   ** standard way of doing it.
   **/
  •page <<
   [text.list.foldl
      \ pile distChar .>
       {
         c: ( newText << distChar.cdr )
         sl: [baseline distChar.car + 0.5*[xmax [bbox c]]]
         pile
         &
         [[shift sl.p]()[rotate [angle sl.T]] [centerx c] ]
       }
      null]
}
