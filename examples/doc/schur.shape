/** Define transform to work with. **/
tf: [shift (3cm,4cm,5cm)]*[rotate3D angle:25° dir:(1,1,2)]
•stdout << `Linear? ´ << tf.linear? << `¢n´
•stdout << `Translation? ´ << tf.translation? << `¢n´
•stdout << `Special? ´ << tf.special? << `¢n´
•stdout << `Euclidean? ´ << tf.Euclidean? << `¢n´

•stdout << `Transforms in new coordinates:¢n´

/** Compute decompositions, both with automatic and manual selection of rank. **/
sda: [Schur_decomp tf]
•stdout << sda.U << `¢n´
•stdout << [sda.U.chop L:0.00001 p:0.000001mm] << ` (chopped)¢n´

sdac: [Schur_decomp tf canonical:true]
•stdout << sdac.U << `¢n´

sd0: [Schur_decomp tf rank:'0]
•stdout << sd0.U << `¢n´

sd2: [Schur_decomp tf rank:'2]
•stdout << sd2.U << `¢n´

/** Verify decompositions; if two transforms are equal, then combining one with
 ** the inverse of the other shall be the identity.
 **/
check: \ tf decomp →
{
	/** The decomposition is verified by reconstructing the original transform, and comparing
   ** with tf by composing with the inverse of tf, and comparing that result with the identity.
	 ** The identity transform is characterized by being both linear and a translation, but to apply
	 ** these predicates we must chop the elements of the transform first.
   **/
  tmp: [( [inverse tf] * decomp.Q*decomp.U*[inverse decomp.Q] ).chop L:0.00001 p:0.00001mm]
	`Verifying ´ + [sourceof decomp] + `: ´ + [if tmp.linear? and tmp.translation? `OK´ `Incorrect´]
}

•stdout << `Verification:¢n´
•stdout << [check tf [locate sda]] << `¢n´
•stdout << [check tf [locate sdac]] << `¢n´
•stdout << [check tf [locate sd0]] << `¢n´
•stdout << [check tf [locate sd2]] << `¢n´

•stdout << `(Not canonical:) Change of coordinates is special? ´ << sda.Q.special? << `¢n´
•stdout << `(Canonical:) Change of coordinates is special? ´ << sdac.Q.special? << `¢n´

/** Prevent empty output error. **/
[spot (0m,0m)]
