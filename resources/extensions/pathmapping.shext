pathmap:
{
  meeter: \ p1 p2 .>
   [if p1.null?
       p2
       (escape_continuation cont
         @handler_NoIntersection: \ pth1 pth2 .>
              (escape_continue cont (pth1.begin--pth1.end>(1%C^[angle (-pth1.end.rt)]))--((1%C^[angle (-pth2.begin.t)])<pth2.begin--pth2.end))
         |
         {
           t: [debuglog_after `found´ ...][][debuglog_before `search...´ ...][][intersection p1 p2]
           [meetpaths [p1 0]--t [continuous_approximator p2 t.p]--[p2 ∞]]
         }
       )
   ]
  
  helper: \ f sl1 sl2 res .>
    [if sl2.looped
        res
	[helper f sl2 sl2+1 [meeter res [f sl1 sl2]]]]

  \ pth f .>
  {
    tmp: [helper f [pth 0] [pth 1] emptypath2D]
    [if pth.closed?
        tmp--cycle
	tmp]
  }
}


sidepath: \ pth dst .>
 (@defaultunit:1%C
  |
  [pathmap pth
    \ sl1 sl2 .>
      (sl1.p + sl1.n*dst)>(^[angle sl1.t])--
      (^[angle sl2.rt])<(sl2.p - sl2.rn*dst)]
 )

sidepath2: \ pth dst .>
  [pathmap pth
    \ sl1 sl2 .>
    {
      p0: sl1.p + sl1.n*dst
      p3: sl2.p - sl2.rn*dst
      p0 > ( (1/3)*sl1.v*( (sl1.t*p3) / (sl1.t*sl2.p) ) ^ [angle sl1.t] ) --
      ( (1/3)*sl2.rv*( (sl2.rt*p0) / (sl2.rt*sl1.p) ) ^ [angle sl2.rt] ) < p3
    }]
