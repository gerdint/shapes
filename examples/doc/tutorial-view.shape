/** This file is part of Shapes.
 **
 ** Shapes is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** any later version.
 **
 ** Shapes is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with Shapes.  If not, see <http://www.gnu.org/licenses/>.
 **
 ** Copyright 2008 Henrik Tidefelt
 **/

##needs centering
##needs conssupport
##needs arrowheads
##needs braces
##needs blockdraw_wfo

R: 5cm
u: R/2.1

/** The function describing the manifold.
 **/
surfz: \ p → (0.24*R) * [sin (p.x/u) * (p.y/u)]

/** A general-purpose helper.
 **/
surfit: \ f p → ( p.x, p.y, [f p] )

/** A general-purpose surface-circle.
 **/
surfaceCircle: \ f r c sides:'12 →
{
  mid: [surfit f c]
	[[range '0 sides-'1].foldl
   \ p e → p & [fill mid--[surfit f c+r*[dir (360°*e)/sides]]--[surfit f c+r*[dir (360°*(e+'1))/sides]]--cycle]
	 null3D]
}


foldpairsl:
{
  helper: \ op nullRes last lst → [if [null? lst] nullRes [helper op [op nullRes last lst.car] lst.car lst.cdr]]

  \ op nullRes lst →
    [if [null? lst]
			lst
		 	[helper op nullRes lst.car lst.cdr]]
}

foldtriplesl:
{
  helper: \ op nullRes back2 back1 lst → [if [null? lst] nullRes [helper op [op nullRes back2 back1 lst.car] back1 lst.car lst.cdr]]

  \ op nullRes lst →
    [if [null? lst]
			lst
      [if [null? lst.cdr]
	  		[list]
		   	[helper op nullRes lst.car lst.cdr.car lst.cdr.cdr]]]
}

functionMesh: \ zMap xRange yRange step:'1 →
{
  xyz: \ p → ( p.x, p.y, [zMap p] )
  [foldl
    \ p x →
			p
			&
			[stroke
        [yRange.foldl
           \ p y → p--[xyz (x,y)]
           emptypath3D
			]]
    null3D
		[sublist [consify xRange] step]
  ]
	&
  [foldl
    \ p y →
			p
			&
			[stroke
        [xRange.foldl
           \ p x → p--[xyz (x,y)]
           emptypath3D
			]]
    null3D
		[sublist [consify yRange] step]
  ]
}

functionSurface: \ zMap xRange yRange →
{
  xyz: \ p → ( p.x, p.y, [zMap p] )
	xConsRange: [consify xRange]
	yConsRange: [consify yRange]
  [foldpairsl
    \ p x1 x2 →
			p
			&
      [foldpairsl
         \ p y1 y2 →
          p
					&
					{
					  p11: [xyz (x1,y1)]
					  p12: [xyz (x1,y2)]
					  p21: [xyz (x2,y1)]
					  p22: [xyz (x2,y2)]
					  pc: [xyz (0.5*(x1+x2),0.5*(y1+y2))]
						[fill pc--p11--p12--cycle]
						&
						[fill pc--p12--p22--cycle]
						&
						[fill pc--p22--p21--cycle]
						&
						[fill pc--p21--p11--cycle]
					}
         null3D
				yConsRange
			]
    null3D
		xConsRange
  ]
/**
	&
	[functionMesh zMap xRange yRange]
**/
}

ridgeLines:
{
  ridgeTest: \ p1 p2 o1 o2 →
  {
    d11: [normalized o1 - p1]
    d12: [normalized o2 - p1]
    dm1: d11 + d12
    d21: [normalized o1 - p2]
    d22: [normalized o2 - p2]
    dm2: d21 + d22
    dc: [normalized p2 - p1]
    ( dm1*dc ≤ dm1*d11 ) and ( ~(dm2*dc) ≤ dm2*d22 )
  }

 \ zMap xRange yRange tf →
  {
    xyz: \ p → ( p.x, p.y, [zMap p] )

  	xConsRange: [consify xRange]
  	yConsRange: [consify yRange]
    [foldpairsl
      \ p x1 x2 →
        [foldpairsl
          \ p y1 y2 →
  					{
  					  p11: view [] tf [] [xyz (x1,y1)]
  					  p12: view [] tf [] [xyz (x1,y2)]
  					  p21: view [] tf [] [xyz (x2,y1)]
  					  p22: view [] tf [] [xyz (x2,y2)]

  					  pc:  view [] tf [] [xyz (0.5*(x1+x2),0.5*(y1+y2))]
  						pc3D: [xyz (0.5*(x1+x2),0.5*(y1+y2))]

  						p
  						&
    						  [if [ridgeTest p11 pc p12 p21] [stroke [xyz (x1,y1)]--pc3D] null3D]
  						    &
  						    [if [ridgeTest p12 pc p11 p22] [stroke [xyz (x1,y2)]--pc3D] null3D]
  						    &
  						    [if [ridgeTest p22 pc p12 p21] [stroke [xyz (x2,y2)]--pc3D] null3D]
  						    &
  						    [if [ridgeTest p21 pc p11 p22] [stroke [xyz (x2,y1)]--pc3D] null3D]
  					}
          p
  				yConsRange
  			]
      null3D
  		xConsRange
    ]
  	&
    [foldtriplesl
      \ p x1 x2 x3 →
        [foldpairsl
          \ p y1 y2 →
  					{
  					  p1: view [] tf [] [xyz (x2,y1)]
  					  p2: view [] tf [] [xyz (x2,y2)]
  					  pc1:  view [] tf [] [xyz (0.5*(x1+x2),0.5*(y1+y2))]
  					  pc2:  view [] tf [] [xyz (0.5*(x2+x3),0.5*(y1+y2))]
  						[if [ridgeTest p1 p2 pc1 pc2]
  							p & [stroke [xyz (x2,y1)]--[xyz (x2,y2)]]
  							p]
  					}
          p
  				yConsRange
  			]
      null3D
  		xConsRange
    ]
  	&
    [foldtriplesl
      \ p y1 y2 y3 →
        [foldpairsl
          \ p x1 x2 →
  					{
  					  p1: view [] tf [] [xyz (x1,y2)]
  					  p2: view [] tf [] [xyz (x2,y2)]
  					  pc1:  view [] tf [] [xyz (0.5*(x1+x2),0.5*(y1+y2))]
  					  pc2:  view [] tf [] [xyz (0.5*(x1+x2),0.5*(y2+y3))]
  						[if [ridgeTest p1 p2 pc1 pc2]
  							p & [stroke [xyz (x1,y2)]--[xyz (x2,y2)]]
  							p]
  					}
          p
  				xConsRange
  			]
      null3D
  		yConsRange
    ]
  }
}

T_obj: [shift (0cm,0cm,~10cm)]*[rotate3D dir:(1,0,0) angle:~90°-~19°]*[rotate3D dir:(0,0,1) angle:~90°+25°]

N_major: '8
N_minor: '2
xRange: [range ~R R count: N_major * N_minor + '1]
yRange: [range ~R R count: N_major * N_minor + '1]

world:
(
@eyez:5cm
|
{

•imagePlane: newGroup
•imagePlane
      << @width:0.8bp
			   |
				 [view
				   T_obj
					 []
					 ( newZSorter
					   <<   @nonstroking:OCCLUDING
					 	 		| [functionSurface surfz xRange yRange]
					   << [functionMesh surfz xRange yRange N_minor]
					   << [ridgeLines surfz xRange yRange T_obj]
					 )
				 ]

•imagePlane << @width:0.3bp | [stroke [rectangle (~3cm,~3cm) (3cm,3cm)]]
						<< [shift (~3cm,~3cm)+(5mm,5mm)] [] (TeX `{\Huge Image plane}´)

•world: newGroup3D
len: 4cm
•world << [immerse (•imagePlane)]
 		 << [stroke (0cm,0cm,0cm)--(len,0cm,0cm) head:[MetaPostArrow3D ahLength:3mm normal:(0,0,1) ...]]
 		 << [stroke (0cm,0cm,0cm)--(0cm,len,0cm) head:[MetaPostArrow3D ahLength:3mm normal:(0,0,1) ...]]
 		 << [stroke (0cm,0cm,0cm)--(0cm,0cm,len) head:[MetaPostArrow3D ahLength:3mm normal:(1,0,0) ...]]
		 << [shift (len,0cm,0cm)] [] [facing [putlabelAbove (TeX `$\hat{x}$´) (0cm,0cm) 1]]
		 << [shift (0cm,len,0cm)] [] [facing [putlabelRight (TeX `$\hat{y}$´) (0cm,0cm) 1]]
		 << [shift (0cm,0cm,len)] [] [facing [putlabelAbove (TeX `$\hat{z}$´) (0cm,0cm) 1]]
		 << [shift (0cm,0cm,@eyez)] [] [facing [fill [circle 2bp]]]
		 << [shift (0cm,0cm,@eyez)] [] [facing [putlabelAbove (TeX `eye´) (0cm,1mm) 0]]
		 << [tag 'eye (0cm,0cm,@eyez)]
		 << [tag 'origin (0cm,0cm,0cm)]

	bracePath: [rotate3D dir:(0,1,0) angle:~90°] [] [immerse [someClosedBrace (0cm,0cm) (@eyez,0cm)]]
  •world << [fill bracePath]
	|** Next, I use that I happen to know that the tip of the brace is at path time 1.
  •world << [shift [bracePath 1].p] [] [facing [putlabelBelow (TeX `$z_{\mathrm{eye}}$´) (0m,0m) 0]]

•world;
}
)

T_view: [shift (0cm,~40cm,0cm)]*[rotate3D dir:(0,1,0) angle:65°]*[rotate3D dir:(0,0,1) angle:15°]*[rotate3D dir:(1,0,0) angle:5°]

@eyez:∞
|
{

theView:
@width:0.3bp
|
[view
  (T_view * T_obj)
  []
	( newZSorter
|**					   << @nonstroking:OCCLUDING | [functionSurface surfz xRange yRange]
	  << [functionMesh surfz xRange yRange N_minor]
		<< [ridgeLines surfz xRange yRange T_view * T_obj]
	)
]

•page << theView
			<< [view (T_view * T_obj) [] [facing [putlabelBelow (TeX `{\huge $3^{\mathrm{D}}$ scene}´) (~2cm,~3cm) 0]]]
			<< [view T_view [] world]
}
