/** This file is part of Shapes.
 **
 ** Shapes is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** any later version.
 **
 ** Shapes is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with Shapes.  If not, see <http://www.gnu.org/licenses/>.
 **
 ** Copyright 2008 Henrik Tidefelt
 **/

pathmap:
{
  meeter: \ p1 p2 →
   [if p1.null?
       p2
       (escape_continuation cont
         @handler_NoIntersection: \ pth1 pth2 →
              (escape_continue cont (pth1.begin--pth1.end>(1%C^[angle (-pth1.end.rT)]))--((1%C^[angle (-pth2.begin.T)])<pth2.begin--pth2.end))
         |
         {
           t: [intersection p1 p2] >> [debuglog_before `search...´ ...] >> [debuglog_after `found´ ...]
           [meetpaths [p1 0]--t [approximator p2 t.p]--[p2 ∞]]
         }
       )
   ]

  helper: \ f sl1 sl2 res →
    [if sl2.looped
        res
	[helper f sl2 sl2+1 [meeter res [f sl1 sl2]]]]

  \ pth f →
  {
    tmp: [helper f [pth 0] [pth 1] emptypath]
    [if pth.closed?
        tmp--cycle
	tmp]
  }
}


sidepath: \ pth dst →
 (@defaultunit:1%C
  |
  [pathmap pth
    \ sl1 sl2 →
      (sl1.p + sl1.N*dst)>(^[angle sl1.T])--
      (^[angle sl2.rT])<(sl2.p - sl2.rN*dst)]
 )

sidepath2: \ pth dst →
  [pathmap pth
    \ sl1 sl2 →
    {
      p0: sl1.p + sl1.N*dst
      p3: sl2.p - sl2.rN*dst
      p0 > ( (1/3)*sl1.v*( (sl1.T*p3) / (sl1.T*sl2.p) ) ^ [angle sl1.T] ) --
      ( (1/3)*sl2.rv*( (sl2.rT*p0) / (sl2.rT*sl1.p) ) ^ [angle sl2.rT] ) < p3
    }]
