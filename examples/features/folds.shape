/** This file is part of Shapes.
 **
 ** Shapes is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** any later version.
 **
 ** Shapes is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with Shapes.  If not, see <http://www.gnu.org/licenses/>.
 **
 ** Copyright 2008 Henrik Tidefelt
 **/

##needs conssupport

lst: [range begin:'4 end:'10]

/**
 ** We can measure the length of a list by folding a function that adds one for each element.
 **/
•stdout << `Length: ´ << [lst.foldl (\ p e → '1+p) '0] << `¢n´

/**
 ** This is to show the order in which the state is modified when folding with state from left and right.
 **/
[lst.foldsl \ p e •dst → { •dst << e   p } void •stdout]
[lst.foldsr \ p e •dst → { •dst << e   p } void •stdout]
•stdout << `¢n´

/**
 ** To show how the laziness of the cons-pair allows us to define infinite streams, we
 ** define some basic stream operations...
 **
 ** To add two streams is easy.
 **/
stream_add: \ s1 s2 → [cons s1.car+s2.car [stream_add s1.cdr s2.cdr]]
/**
 ** To map infinite streams require some care.  Note that the usual map defined in terms
 ** of a right fold cannot be used on infinite lists.  Instead, we must define the operation
 ** from scratch.
 **/
stream_map: \ f lst → [if [null? lst] [list] [cons [f lst.car] [stream_map f lst.cdr]]]

/**
 ** A classic stream example -- the Fibonacci numbers.
 **/
Fib: [cons '0 [cons '1 [stream_add Fib Fib.cdr]]]

/**
 ** We square each number in the stream.
 **/
Fib2: [stream_map (\ x → x*x) Fib]


nth: \ lst n → [if n = '0 lst.car [nth lst.cdr n-'1]]

•stdout << `A short sequence of Fibonacci numbers:¢n´

•stdout << [nth Fib '4] << `¢n´
•stdout << [nth Fib '5] << `¢n´
•stdout << [nth Fib '6] << `¢n´

•stdout << `... and the same sequence squared:¢n´

•stdout << [nth Fib2 '4] << `¢n´
•stdout << [nth Fib2 '5] << `¢n´
•stdout << [nth Fib2 '6] << `¢n´

|** Avoid empty output error
•page << [stroke (0cm,0cm)--(1cm,1cm)]
