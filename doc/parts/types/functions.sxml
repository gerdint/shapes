<!-- This file is part of Shapes.                                           -->
<!--                                                                        -->
<!-- Shapes is free software: you can redistribute it and/or modify         -->
<!-- it under the terms of the GNU General Public License as published by   -->
<!-- the Free Software Foundation, either version 3 of the License, or      -->
<!-- any later version.                                                     -->
<!--                                                                        -->
<!-- Shapes is distributed in the hope that it will be useful,              -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of         -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          -->
<!-- GNU General Public License for more details.                           -->
<!--                                                                        -->
<!-- You should have received a copy of the GNU General Public License      -->
<!-- along with Shapes.  If not, see <http://www.gnu.org/licenses/>.        -->
<!--                                                                        -->
<!-- Copyright 2008 Henrik Tidefelt                                         -->

<section id="types/functions">
<title>Functions and function-like things</title>
<top>
	<p>Besides objects of type <typename>Function</typename>, there are other objects that can behave like functions in many ways.  Most importantly, objects of the types in this section can appear at the first position in a composite expression.</p>
</top>

  <coretype name="Function">
    <abstraction>
			<p>In <str-Shapes />, the type <self /> serves two purposes; an object of type <self /> may be either a <em>true function</em>, or a <em>procedure</em>.  A true function cannot have side effects, and will always return the same result given the same arguments and dynamic environment.  Note that changing the dynamic environment may change the result of a function.</p>
    </abstraction>
    <construction>
      <syntax name="function" />
      <syntax name="procedure" />
    </construction>
  </coretype>

  <coretype name="Transform">
    <abstraction>
      <p>The <self /> type is an affine transform, mapping <named-type name="Coord" /> to <named-type name="Coord" />.</p>
    </abstraction>
  </coretype>

  <coretype name="Transform3D">
    <abstraction>
			<p>The analogue of <named-type name="Transform" />, in <str-3D /> instead of <str-2D />.</p>
    </abstraction>
  </coretype>

</section>
