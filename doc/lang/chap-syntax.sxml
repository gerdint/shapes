<section id="chap-syntax">
<title>Syntax</title>
<top>
<p>Here, term <em>syntax</em> basically refers to everything that does not have to do with the values bound to variables in the initial environments.  Most importantly, the library functions (or <em>preamble</em>, or <em>standard procedures</em>, et c) are not included here.</p>

<p>It might be confusing, though, to find that many of the composite expression syntaxes are implemented as function calls, which the user may become aware of when encoutering certain error messages.</p>
</top>

<section id="syntax-atoms">
<title>Atoms</title>

<section id="floats">
<title>Floats</title>
<body>
<syntax-table>
<tr> <td><syntaxname>basic-float</syntaxname></td> <td><bnf>::</bnf></td> <td><typename>Float</typename></td></tr>
<tr> <td><syntaxname class="new">basic-float</syntaxname></td> <td><bnf>→</bnf></td> <td><lexerregexp>[~]?[0-9]+([.][0-9]*)?</lexerregexp></td></tr>
<tr> <td><syntaxname>float</syntaxname></td> <td><bnf>::</bnf></td> <td><typename>Float</typename></td></tr>
<tr> <td><syntaxname class="new">float</syntaxname></td> <td><bnf>→</bnf></td> <td><inline><syntaxname>basic-float</syntaxname> <bnf>|</bnf> <syntaxname>basic-float</syntaxname>°</inline></td></tr>
</syntax-table>
<p>A float begins with an optional tilde sign which, when present, indicates that the number is negative.  Then follows one or more decimal digits, an optional decimal point, and finally an optional sequence of decimal digits.  A degree sign can be appended, effectively multiplying the preceding float by pi/180.  Examples are given below.</p>

<token-example-table>
<head>
<tr> <td>Token</td> <td width="20"></td> <td>Valid float?</td> </tr>
</head>
<body>
<tr> <td><inline>13</inline></td> <td></td> <td>Yes (= 13)</td> </tr>
<tr> <td><inline>~13</inline></td> <td></td> <td>Yes (= -13)</td> </tr>
<tr> <td><inline>2.</inline></td> <td></td> <td>Yes (= 2.0)</td> </tr>
<tr> <td><inline>~3.14</inline></td> <td></td> <td>Yes (= -3.14)</td> </tr>
<tr> <td><inline>~180°</inline></td> <td></td> <td>Yes (= -3.14159...)</td> </tr>
<tr> <td><inline>.609</inline></td> <td></td> <td>No (missing integer part)</td> </tr>
<tr> <td><inline>-3.1</inline></td> <td></td> <td>No (binary minus sign)</td> </tr>
<tr> <td><inline>1 000</inline></td> <td></td> <td>No (spaces are not allowed)</td> </tr>
<tr> <td><inline>180 °</inline></td> <td></td> <td>No (space is not allowed)</td> </tr>
</body>
</token-example-table>
<p></p>

<p>An alternative way to create negative numbers is to use the unary negation expression, for example: <inline>(-3.1)</inline>.  However, note that the parentheses are mandatory, thus reducing readability compared to the tilde sign alternative.</p>
</body>
</section>

</section><!-- End of syntax-atoms -->

<section id="syntax-include">
<title>File inclusion and comments</title>
<top>
<p>These are two very basic functions of the scanner, and have in common that they have nothing to do with the <em>meaning</em> of program code, but only where (not) to <em>find</em> the code.</p>
</top>

<section id="syntax-include-include">
<title>File inclusion</title>
<body>
<p>Files are included using the scanner directives <inline>##needs</inline> and <inline>##include</inline>.  The <inline>##needs</inline> directive is used to require extension sources to be loaded, and will only load each source once.  This avoids the duplicate definitions that would occur if the source was loaded several times at, say, the global scope.  It is strongly recommended not to use <inline>##needs</inline> but in the global scope.  The <inline>##include</inline> directive will load the source unconditionally, and is used with application sources (use with extension source may be permitted in the future).  The syntax is</p>
<pre>
##needs <filename class="replacable">filenamebase</filename> <bnf>(</bnf>: <bnf>_</bnf> <filename class="replacable">directory</filename><bnf>)?</bnf>
</pre>
<p>which <em>must appear at the beginning of a line</em> (note the mandatory whitespace after the colon).  The syntax for <inline>##include</inline> is analogous, like this:</p>
<pre>
##needs blockdraw
##needs book_settings : ~/Library/Shapes/Project Settings
##include background
##include foreground
</pre>
<p></p>

<p>Note that the <em>leading</em> whitespace is eaten up, while the whitespace in the directory name is kept.</p>
</body>
</section>

<section id="syntax-include-comments">
<title>Comments</title>
<body>
<p>Multi-line comments are delimited by <inline>/**</inline> and <inline>**/</inline>, and nest.  It is recommended that multi-line comments begin each line with <inline>**</inline>.  It is also recommended that no code is put on the same line as a multi-line comment, since it will be very hard for the eye to see what really is commented out.</p>

<p>Rest-of-line comments start with <inline>|**</inline>.</p>

<p>The designers of the C language may have a good point when they say that rest-of-line comments is the only type of comment to be used to comment out code.  Whether they think that rest-of-line comments may also be used for comments I don't know, but I think it would be a good idea to reserve the use of rest-of-line comments for only commenting out code, and to use multiline comments for comments (documentation).</p>
</body>
</section>
</section><!-- end of syntax-include -->

<section id="syntax-atoms">
<title>Atoms</title>
<top>
<p>Here the different scanner tokens that directly define values are described.</p>
</top>

<section id="syntax-atoms-floats">
<title>Floats</title>
<body>
<syntax-table>
<tr> <td><syntaxname>basic-float</syntaxname></td> <td><bnf>::</bnf></td> <td><typename>Float</typename></td></tr>
<tr> <td><syntaxname class="new">basic-float</syntaxname></td> <td><bnf>→</bnf></td> <td><lexerregexp>[~]?[0-9]+([.][0-9]*)?</lexerregexp></td></tr>
<tr> <td><syntaxname>float</syntaxname></td> <td><bnf>::</bnf></td> <td><typename>Float</typename></td></tr>
<tr> <td><syntaxname class="new">float</syntaxname></td> <td><bnf>→</bnf></td> <td><inline><syntaxname>basic-float</syntaxname> <bnf>|</bnf> <syntaxname>basic-float</syntaxname>°</inline></td></tr>
</syntax-table>
<p>A float begins with an optional tilde sign which, when present, indicates that the number is negative.  Then follows one or more decimal digits, an optional decimal point, and finally an optional sequence of decimal digits.  A degree sign can be appended, effectively multiplying the preceding float by pi/180.  Examples are given below.</p>

<token-example-table>
<head>
<tr> <td>Token</td> <td>Valid float?</td></tr>
</head>
<body>
<tr> <td><inline>13</inline></td> <td>Yes (= 13)</td> </tr>
<tr> <td><inline>~13</inline></td> <td>Yes (= -13)</td> </tr>
<tr> <td><inline>2.</inline></td> <td>Yes (= 2.0)</td> </tr>
<tr> <td><inline>~3.14</inline></td> <td>Yes (= -3.14)</td> </tr>
<tr> <td><inline>~180°</inline></td> <td>Yes (= -3.14159...)</td> </tr>
<tr> <td><inline>.609</inline></td> <td>No (missing integer part)</td> </tr>
<tr> <td><inline>-3.1</inline></td> <td>No (binary minus sign)</td> </tr>
<tr> <td><inline>1 000</inline></td> <td>No (spaces are not allowed)</td> </tr>
<tr> <td><inline>180 °</inline></td> <td>No (space is not allowed)</td> </tr>
</body>
</token-example-table>
<p></p>

<p>An alternative way to create negative numbers is to use the unary negation expression, for example: <inline>(-3.1)</inline>.  However, note that the parentheses are mandatory, thus reducing readability compared to the tilde sign alternative.</p>
</body>
</section>

</section><!-- end of syntax-atoms -->

</section><!-- end of chap-syntax -->
