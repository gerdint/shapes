<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="formats/html.xsl"?>

<!-- This file is part of Shapes.                                           -->
<!--                                                                        -->
<!-- Shapes is free software: you can redistribute it and/or modify         -->
<!-- it under the terms of the GNU General Public License as published by   -->
<!-- the Free Software Foundation, either version 3 of the License, or      -->
<!-- any later version.                                                     -->
<!--                                                                        -->
<!-- Shapes is distributed in the hope that it will be useful,              -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of         -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          -->
<!-- GNU General Public License for more details.                           -->
<!--                                                                        -->
<!-- You should have received a copy of the GNU General Public License      -->
<!-- along with Shapes.  If not, see <http://www.gnu.org/licenses/>.        -->
<!--                                                                        -->
<!-- Copyright 2008 Henrik Tidefelt                                         -->


<book>
	<title>Core types</title>
	<description>
		<p>Presentation of the variable types defined by the core language.</p>
	</description>
	<meta-selflink><part-href name="types" /></meta-selflink>
	<examples-home href=<!--#expand-next-string-->"$(EXAMPLES)" />
	<top>
		<p>This part of the documentation is a somewhat arbitrary description of the core types in the language a user should be aware of.  The reason for having such a sloppy characterization of what is presented here, is that as long as <str-Shapes /> is dynamically typed, it is not <em>that</em> important to know exactly what type an object has.  It also becomes a rather arbitrary language design decision when the language should reflect a subdivision into subtypes in the compiler.  For instance, the language end type <named-type name="Drawable" /> has certainly many different types representing it in the compiler.</p>
		<p>Below, an alphabetical list of links to bindings is provided.  For a grouping of the bindings by cathegory, the readers is referred to the the chapter on system bindings in the main language reference.</p>
	</top>
	<body>
		<alphabetical-list-of-types />
	</body>
	<!--#include virtual="simple.sxml" -->
	<!--#include virtual="tuples.sxml" -->
	<!--#include virtual="points-paths.sxml" -->
	<!--#include virtual="graphics-2d.sxml" -->
	<!--#include virtual="functions.sxml" -->
	<!--#include virtual="containers.sxml" -->
	<!--#include virtual="misc.sxml" -->
	<!--#include virtual="graphics-3d.sxml" -->
	<!--#include virtual="composite.sxml" -->
	<external>
		<!--#include virtual="../bindings/functions.sxml" -->
		<!--#include virtual="../syntax/operators.sxml" -->
	</external>
</book>
