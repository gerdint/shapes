0.3.4
The first line of this file shall be the current version string.  It shall be incremented at least after each tagging.  Thus, when tagging, one can either use the current version string, or increment.  If incrementing, note that it makes no sense to increment only the least significant part of the version string.  The version history may be filled in at any time, but when a version is tagged, the current date shall be added on the first line of the release notes for the version being tagged.

  Version history
===================

====( 0.3.4 )====
FILL IN DATE WHEN TAGGING


====( 0.3.3 )====
2007-11-21

Simple constants in the global environment were named back to their names before variables had to begin with lowercase letters.  For instance, rgb_RED changed back to RGB_RED.


====( 0.3.2 )====
2007-11-21

New ways to specify files, both on the command line and through environment variables.

Further improved build process, and minor additions to the documentation.


====( 0.3.1 )====
2007-11-05

Bugfixes required to make the project compile in the Cent environment.

More standardization.


====( 0.3.0 )====
2007-11-03

First version with most references to old project names removed.

Slowly changing to a more standardized way to compile things, for better compilance with standard make tools in the future.


====( 0.2.3 )====
2007-11-03

Upsampling has been added.  The interesting methods for upsampling only apply in 2D, but length-based upsampling is provided also in 3D.  Please note that there is no need to do upsample_inflections before doing upsample_bends, as this is done autimatically to ensure clear semantics.  The method upsample_balance samlpes the timewise midpoint of each segment, which I believe will make the speed equal in the incoming and outgoing side of the sample point.

Identifiers are again allowed to begin with uppercase letters.  Type names are prefixed with either a paragraph sign or a double slash.

This is planned to be the last version where anything "Drool" remains.


====( 0.2.2 )====
2007-06-05

The interpreter now makes another pass of the code, checking variable bindings, function borders, and other static aspects of the code.  Type checking will hopefully fit in here in the future.  The three passes are:
1) Scan and parse
2) Analyze
3) Evaluate

The error reporting mechanism has been revised so that the errors found during static analysis are collected in a list, rather than throwing just the first we detect and then abort.


====( 0.2.1 )====
2007-05-19

By now many feature examples have been compiled successfully, and the tests go through.

More importantly, the random number facility has been redesigned so that states are used where appropriate.  To make it easy to use states in folds, the kernel's list type has been enhanced with methods foldsl ("fold with state, left") and foldsr ("fold with state, right").  However, this was not quite necessary since the same functionality can be implemented as an extension, as was done in conssupport.drext, and used random.drool.

Among all bugs found lately, one was in the z-buffer.  Although it was fixed, I'm not at all convinced that transforms are handled correctly, nor that overlaps and line-surface intersections are determined correctly.


====( 0.2.0 )====
2007-04-24

This version marks the point where the two feature examples states.drool and values.drool compile.  This means that the program is getting useful again.  However, the great majority of the examples have not been updated, and it is expected that many bugs will be revealed in the process of updating them.

In other words, this version marks the beginning of the use of states and structures, but these features should be debugged and tested on the many available examples before being considered a true alternative to using the language as of version 0.1.1.


====( 0.1.2 )====

This version is to be used during the early phases of the transition from hot variables to temporary states.  One the program becomes useful again, the version number shall be incremented.


====( 0.1.1 )====
2007-01-02

Testing has been automated.  The tests are divided into two cathegories depending on whether it is the graphical or textual program output that is to be compared against a given output.  See the Makefile's in the ./test directory and its subdirectories to learn how to run the tests or add new tests.

The z-buffer idea has been postponed.  Instead, a z-sorter has been implemented.  It does not handle cyclic overlaps properly.

There are lots of bugfixes and small enhancements over the previous version.  One of the enhancements is the "[...]"-syntax for evaluated cuts along one argument.

This is planned to be the the last usable version with hot variables.


====( 0.1 )====
2006-12-12

First named version.

I'd say this is far too late for the introduction of a version number.  The reason not to make a named version has been that rather big changes in the language syntax have been expected.  However, these changes are still expected, but today I was really curious to know what binary I had installed, and this is what made me take this step.

To give an idea of how long this project has been running I'll mention two things.  First, the initial import of the project into subversion dates back to 2005-09-23.  Second, there's now 395 kB of zipped source code for the compiler.  In addition, there are many examples and language extension files.

There still not much at all of documentation.  Comments in the source are sparse, much too sparse.  A user's guide hsa been initiated, but the files have not yet entered the project repository.  There is no laguage definition either, but this is partly because the language is still expected to change substantially.

A few words about testing:  The testing is without structure so far.  I generate examples to test the features I'm currently working on, but I do not generate tests that can be checked automatically.  This probably says something about the quality of this version.  That I plan automatize testing soon does not make this version better.

The list of features that exist in this version is much too long for me to think of right now.  The first such a list I expect to create will be the user documentation, so until then the examples is as close as one gets.
