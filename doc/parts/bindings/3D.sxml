<section id="bindings/3D">
<title><str-3D /> related stuff</title>
<top>
<p>The bindings that are related to <str-3D /> are kept aside in this section, so that users not interested in <str-3D /> graphics can safely choose not to read this section.</p>
</top>

<system-binding identifier="view">
	<function>
		<case constructor-of="Geometric">
			<arguments>
				<arg>
					<type><named-type name="Geometric3D" /></type>
				</arg>
			</arguments>
			<dynamic-references><dynvar name="eyez" /></dynamic-references>
			<description>
				<p>Apply pin-hole camera projection.  The geometry of the projection is documented under <dynvar name="eyez" />.</p>
				<p>Exactly how <str-3D /> objects, if they can at all, behave when being projected, depend on the exact object type.  <named-type name="Drawable3D" /> objects will result in <named-type name="Drawable" /> objects, the operation is generally very complicated if occlusions are to be taken into account.  (What makes it difficult is that <str-Shapes /> deals with scalable graphics, and cannot resort to a pixel <eq>z</eq>-buffer.)  There are three <str-3D /> graphics container types with different behaviors.  First, <named-type name="Group3D" /> takes no consideration of occlusions, and just puts the projections of its part on top of each other in the order in which they appear in the data structure.  The two remaining types tries to respect occlusions, and the reader is referred to the documentation of these types to find out more about their algorithms, see <named-type name="ZBuffer" /> and <named-type name="ZSorter" />.</p>
			</description>
			<see-also><binding name="immerse" /></see-also>
		</case>
	</function>
</system-binding>

<system-binding identifier="immerse">
	<function>
		<case constructor-of="Geometric3D">
			<arguments>
				<arg>
					<type><named-type name="Geometric" /></type>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>
				<p>Move object from <str-2D /> to <str-3D /> by equipping it with a <eq>z = 0</eq> coordinate.  The operation is reversed by <binding name="view" />.</p>
			</description>
		</case>
	</function>
	<see-also><binding name="view" /> <binding name="facing" /></see-also>
</system-binding>

<system-binding identifier="facing">
	<function>
		<case constructor-of="Drawable3D">
			<arguments>
				<arg identifier="obj">
					<type><named-type name="Drawable" /></type>
				</arg>
				<arg identifier="scale">
					<type><named-type name="Boolean" /></type>
					<default>false</default>
				</arg>
				<arg identifier="distort">
					<type><named-type name="Boolean" /></type>
					<default>false</default>
				</arg>
			</arguments>
			<description>
				<p>Make a special kind of <str-3D /> object at <eq>z = 0</eq>, which will always face the viewer even after <str-3D /> transforms.  It is useful for labels and other <str-2D /> annotations that need to be positioned in terms of objects in a <str-3D /> world.</p>
				<p>When the object is viewed after being transformed in <str-3D />, it will just be transformed by a <str-2D /> transform, so the object never has to go truly <str-3D />.  The object will be shifted according to how its origin moved by the <str-3D /> transform.  The arguments <arg name="scale" /> and <arg name="distort" /> determine how the linear part of the <str-2D /> transform is obtained from the <str-3D /> transform.  If <arg name="scale" /> is set, the object will be scaled according to the <eq>z</eq> coordinate of its transformed origin.  If <arg name="distort" /> is set, the linear <eq>(x,y)</eq> part of the <str-3D /> transform will be used.</p>
			</description>
		</case>
		<case constructor-of="Drawable3D">
			<arguments>
				<arg identifier="obj">
					<type>
						<function-type>
							<arguments>
								<arg><type><named-type name="Transform3D" /></type></arg>
							</arguments>
							<result><named-type name="Drawable" /></result>
						</function-type>
					</type>
				</arg>
			</arguments>
			<dynamic-references><dynstate name="all" /></dynamic-references>
			<description>
				<p>Gives the user full control of how to display the object when being viewed through a <str-3D /> transform.  The dynamic state is captured, and will be in scope later when the embedded function is invoked.</p>

				<note>
					<p>The evaluation order is quite non-standard for the objects created here.  Viewing an object is generally an atomic operation from a continuation passing point of view.  Hence, when the function is applied to the transform to obtain the <str-2D /> result, this will take place in an evaluation loop of its own.  This is very likely to render generated error messages rather useless when it comes to localizing the problem.</p>
					<p>Since the object created here only has a meaning when being viewed, it cannot be searched (see <binding name="tag" /> and <binding name="find" />) for tags as long as it remains in <str-3D />.</p>
				</note>

				<p>If you ever considered solving the intricate problem of generating nice arrowheads for paths in <str-3D /> by simply treating the path as if it was in <str-2D />, think again, as the example below shows!</p>

				<example-with-output title="Example" internal-id="example/facing-function">
					<image pdf="features/facefun_3.pdf" jpg="features/facefun_y_big.jpg" />
<source file="features/facefun.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)features/facefun.shape" -->]]>
</source>
				</example-with-output>
			</description>
		</case>
	</function>
	<see-also><binding name="immerse" /></see-also>
</system-binding>


</section>
