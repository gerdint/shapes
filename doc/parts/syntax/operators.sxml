<!-- This file is part of Shapes.                                           -->
<!--                                                                        -->
<!-- Shapes is free software: you can redistribute it and/or modify         -->
<!-- it under the terms of the GNU General Public License as published by   -->
<!-- the Free Software Foundation, either version 3 of the License, or      -->
<!-- any later version.                                                     -->
<!--                                                                        -->
<!-- Shapes is distributed in the hope that it will be useful,              -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of         -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          -->
<!-- GNU General Public License for more details.                           -->
<!--                                                                        -->
<!-- You should have received a copy of the GNU General Public License      -->
<!-- along with Shapes.  If not, see <http://www.gnu.org/licenses/>.        -->
<!--                                                                        -->
<!-- Copyright 2008 Henrik Tidefelt                                         -->

<operator-unary op="~" side="prefix">

<case type="Float">
<result><named-type name="Float" /></result>
<description>
Negation.
</description>
</case>

<case type="Integer">
<result><named-type name="Integer" /></result>
<description>
Negation.
</description>
</case>

<case type="Length">
<result><named-type name="Length" /></result>
<description>
Negation.
</description>
</case>

<case type="FloatPair">
<result><named-type name="FloatPair" /></result>
<description>
Scaling by negative unit.
</description>
</case>

<case type="FloatTriple">
<result><named-type name="FloatTriple" /></result>
<description>
Scaling by negative unit.
</description>
</case>

<case type="Coords">
<result><named-type name="Coords" /></result>
<description>
Scaling by negative unit.
</description>
</case>

<case type="Coords3D">
<result><named-type name="Coords3D" /></result>
<description>
Scaling by negative unit.
</description>
</case>

</operator-unary> <!-- end of prefix "~" -->


<operator-unary op="+" side="prefix">

<case type="Length">
<result consider-constructor="yes"><named-type name="Offset" /></result>
<description>
<em>Note: Requires enclosing parantheses!</em>  Constructs a relative length.
</description>
</case>

<case type="Coords">
<result consider-constructor="yes"><named-type name="OffsetCoords" /></result>
<description>
<em>Note: Requires enclosing parantheses!</em>  Constructs relative coordinates.
</description>
</case>

<case type="Coords3D">
<result consider-constructor="yes"><named-type name="OffsetCoords3D" /></result>
<description>
<em>Note: Requires enclosing parantheses!</em>  Constructs relative coordinates.
</description>
</case>

</operator-unary> <!-- end of prefix "+" -->


<operator-unary op="not" side="prefix">

<case type="Boolean">
<result><named-type name="Boolean" /></result>
<description>
Negation.
</description>
</case>

</operator-unary> <!-- end of prefix "not" -->

<operator-unary op="--cycle" side="postfix">

<case type="PathPoint">
<result><named-type name="Path" /></result>
<description>
Constructs a closed path with only one spline.
</description>
</case>

<case type="Path">
<result><named-type name="Path" /></result>
<description>
Closes an open path.
</description>
</case>

<case type="Path3D">
<result><named-type name="Path" /></result>
<description>
Closes an open path.
</description>
</case>

<case type="PathPoint3D">
<result><named-type name="Path3D" /></result>
<description>
Constructs a closed path with only one spline.
</description>
</case>

</operator-unary> <!-- end of postfix "- -cycle" (Don't mess with the ugly space in this comment!) -->


<operator-binary op="--">

<case first-type="Float" second-type="Float">
<result><named-type name="Float" /></result>
<description>
Pythagoream subtraction.  Both terms must be non-negative, and second term must not be larger than the first.
</description>
</case>

<case first-type="Length" second-type="Length">
<result><named-type name="Length" /></result>
<description>
Pythagoream subtraction.  Both terms must be non-negative, and second term must not be larger than the first.
</description>
</case>

<case first-type="Coords" second-type="Coords">
<result><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Coords" second-type="PathPoint">
<result><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="PathPoint" second-type="PathPoint">
<result><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Coords" second-type="Path">
<result><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Path" second-type="Coords">
<result><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="PathPoint" second-type="PathPoint">
<result consider-constructor="yes"><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="PathPoint" second-type="Path">
<result><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Path" second-type="PathPoint">
<result><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Path" second-type="Path">
<result consider-constructor="yes"><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="PathSlider" second-type="PathSlider">
<result consider-constructor="yes"><named-type name="Path" /></result>
<description>
Path connection.
</description>
</case>

<case first-type="Coords3D" second-type="Coords3D">
<result><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Coords3D" second-type="PathPoint3D">
<result><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="PathPoint3D" second-type="PathPoint3D">
<result consider-constructor="yes"><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Coords3D" second-type="Path3D">
<result><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Path3D" second-type="Coords3D">
<result><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="PathPoint3D" second-type="PathPoint3D">
<result><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="PathPoint3D" second-type="Path3D">
<result><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Path3D" second-type="PathPoint3D">
<result><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="Path3D" second-type="Path3D">
<result consider-constructor="yes"><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>
<case first-type="PathSlider3D" second-type="PathSlider3D">
<result consider-constructor="yes"><named-type name="Path3D" /></result>
<description>
Path connection.
</description>
</case>

</operator-binary> <!-- end of binary "- -" -->


<operator-binary op="++">

<case first-type="Float" second-type="Float">
<result><named-type name="Float" /></result>
<description>
Pythagoream addition.
</description>
</case>

<case first-type="Length" second-type="Length">
<result><named-type name="Length" /></result>
<description>
Pythagoream addition.
</description>
</case>

</operator-binary> <!-- end of binary "++" -->


<operator-binary op="&amp;">

<case first-type="Path" second-type="Path">
<result consider-constructor="yes"><named-type name="MultiPath" /></result>
<description>
Path union.
</description>
</case>
<case first-type="MultiPath" second-type="Path">
<result><named-type name="MultiPath" /></result>
<description>
Path union.
</description>
</case>
<case first-type="Path" second-type="MultiPath">
<result><named-type name="MultiPath" /></result>
<description>
Path union.
</description>
</case>
<case first-type="MultiPath" second-type="MultiPath">
<result><named-type name="MultiPath" /></result>
<description>
Path union.
</description>
</case>

<case first-type="Path3D" second-type="Path3D">
<result consider-constructor="yes"><named-type name="MultiPath3D" /></result>
<description>
Path union.
</description>
</case>
<case first-type="MultiPath3D" second-type="Path3D">
<result><named-type name="MultiPath3D" /></result>
<description>
Path union.
</description>
</case>
<case first-type="Path3D" second-type="MultiPath3D">
<result><named-type name="MultiPath3D" /></result>
<description>
Path union.
</description>
</case>
<case first-type="MultiPath3D" second-type="MultiPath3D">
<result><named-type name="MultiPath3D" /></result>
<description>
Path union.
</description>
</case>

<case first-type="DynamicBindings" second-type="DynamicBindings">
<result><named-type name="DynamicBindings" /></result>
<description>
Dynamic binding union.
</description>
</case>

<case first-type="Drawable" second-type="Drawable">
<result><named-type name="Drawable" /></result>
<description>
Graphics composition.  Second argument on top of first.
</description>
</case>

<case first-type="Drawable3D" second-type="Drawable3D">
<result><named-type name="Drawable3D" /></result>
<description>
Graphics composition.  Second argument on top of first.
</description>
</case>

</operator-binary> <!-- end of binary "&" -->

<operator-binary op="&amp;|">

<case first-type="DynamicBindings" second-type="DynamicBindings">
<result><named-type name="DynamicBindings" /></result>
<description>
Asymmetric dynamic binding union.  Bindings to the right take precedence over bindings to the left.
</description>
</case>

</operator-binary> <!-- end of binary "&|" -->


<operator-binary op="+">

<case first-type="Float" second-type="Float">
<result><named-type name="Float" /></result>
<description>
Addition.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Integer" /></result>
<description>
Addition.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Length" /></result>
<description>
Addition.
</description>
</case>
<case first-type="FloatPair" second-type="FloatPair">
<result><named-type name="FloatPair" /></result>
<description>
Addition.
</description>
</case>
<case first-type="Coords" second-type="Coords">
<result><named-type name="Coords" /></result>
<description>
Addition.
</description>
</case>
<case first-type="FloatTriple" second-type="FloatTriple">
<result><named-type name="FloatTriple" /></result>
<description>
Addition.
</description>
</case>
<case first-type="Coords3D" second-type="Coords3D">
<result><named-type name="Coords3D" /></result>
<description>
Addition.
</description>
</case>

<case first-type="String" second-type="String">
<result><named-type name="String" /></result>
<description>
Concatenation.
</description>
</case>

<case first-type="Dash" second-type="Length">
<result><named-type name="Dash" /></result>
<description>
Shift.
</description>
</case>
<case first-type="Length" second-type="Dash">
<result><named-type name="Dash" /></result>
<description>
Shift.
</description>
</case>

<case first-type="PathSlider" second-type="Float">
<result><named-type name="PathSlider" /></result>
<description>
Move spline time.
</description>
</case>
<case first-type="PathSlider" second-type="Length">
<result><named-type name="PathSlider" /></result>
<description>
Move distance.
</description>
</case>
<case first-type="PathSlider3D" second-type="Float">
<result><named-type name="PathSlider3D" /></result>
<description>
Move spline time.
</description>
</case>
<case first-type="PathSlider3D" second-type="Length">
<result><named-type name="PathSlider3D" /></result>
<description>
Move distance.
</description>
</case>

<case first-type="RGB" second-type="RGB">
<result><named-type name="RGB" /></result>
<description>
Component-wise addition.
</description>
</case>
<case first-type="Gray" second-type="Gray">
<result><named-type name="Gray" /></result>
<description>
Component addition.
</description>
</case>
<case first-type="SpecularReflection" second-type="SpecularReflection">
<result><named-type name="SpecularReflection" /></result>
<description>
Combine reflections.
</description>
</case>

</operator-binary> <!-- end of binary "+" -->


<operator-binary op="-">

<case first-type="Float" second-type="Float">
<result><named-type name="Float" /></result>
<description>
Subtraction.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Integer" /></result>
<description>
Subtraction.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Length" /></result>
<description>
Subtraction.
</description>
</case>
<case first-type="FloatPair" second-type="FloatPair">
<result><named-type name="FloatPair" /></result>
<description>
Subtraction.
</description>
</case>
<case first-type="Coords" second-type="Coords">
<result><named-type name="Coords" /></result>
<description>
Subtraction.
</description>
</case>
<case first-type="FloatTriple" second-type="FloatTriple">
<result><named-type name="FloatTriple" /></result>
<description>
Subtraction.
</description>
</case>
<case first-type="Coords3D" second-type="Coords3D">
<result><named-type name="Coords3D" /></result>
<description>
Subtraction.
</description>
</case>

<case first-type="PathSlider" second-type="Float">
<result><named-type name="PathSlider" /></result>
<description>
Reverse move spline time.
</description>
</case>
<case first-type="PathSlider" second-type="Length">
<result><named-type name="PathSlider" /></result>
<description>
Reverse move distance.
</description>
</case>
<case first-type="PathSlider3D" second-type="Float">
<result><named-type name="PathSlider3D" /></result>
<description>
Reverse move spline time.
</description>
</case>
<case first-type="PathSlider3D" second-type="Length">
<result><named-type name="PathSlider3D" /></result>
<description>
Reverse move distance.
</description>
</case>

</operator-binary> <!-- end of binary "-" -->


<operator-binary op="/_">

<case first-type="Float" second-type="Float">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  The result is zero if signs are equal, otherwise the result is π.
</description>
</case>
<case first-type="Float" second-type="Length">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  The result is zero if signs are equal, otherwise the result is π.
</description>
</case>
<case first-type="Length" second-type="Float">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  The result is zero if signs are equal, otherwise the result is π.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  The result is zero if signs are equal, otherwise the result is π.
</description>
</case>

<case first-type="FloatPair" second-type="FloatPair">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  Otherwise, the usual definition of angle between vector applies.
</description>
</case>
<case first-type="FloatPair" second-type="Coords">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  Otherwise, the usual definition of angle between vector applies.
</description>
</case>
<case first-type="Coords" second-type="FloatPair">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  Otherwise, the usual definition of angle between vector applies.
</description>
</case>
<case first-type="Coords" second-type="Coords">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  Otherwise, the usual definition of angle between vector applies.
</description>
</case>

<case first-type="FloatTriple" second-type="FloatTriple">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  Otherwise, the usual definition of angle between vector applies.
</description>
</case>
<case first-type="FloatTriple" second-type="Coords3D">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  Otherwise, the usual definition of angle between vector applies.
</description>
</case>
<case first-type="Coords3D" second-type="FloatTriple">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  Otherwise, the usual definition of angle between vector applies.
</description>
</case>
<case first-type="Coords3D" second-type="Coords3D">
<result><named-type name="Float" /></result>
<description>
In presence of a zero arguent, the result is π/2.  Otherwise, the usual definition of angle between vector applies.
</description>
</case>

</operator-binary> <!-- end of binary "/_" -->


<operator-binary op="*">

<case first-type="Float" second-type="Float">
<result><named-type name="Float" /></result>
<description>
Multiplication.
</description>
</case>

<case first-type="FloatPair" second-type="FloatPair">
<result><named-type name="Float" /></result>
<description>
Standard inner product.
</description>
</case>
<case first-type="FloatPair" second-type="Float">
<result><named-type name="FloatPair" /></result>
<description>
Vector-scalar multiplication.
</description>
</case>
<case first-type="Float" second-type="FloatPair">
<result><named-type name="FloatPair" /></result>
<description>
Vector-scalar multiplication.
</description>
</case>
<case first-type="FloatTriple" second-type="FloatTriple">
<result><named-type name="Float" /></result>
<description>
Standard inner product.
</description>
</case>
<case first-type="FloatTriple" second-type="Float">
<result><named-type name="FloatTriple" /></result>
<description>
Vector-scalar multiplication.
</description>
</case>
<case first-type="Float" second-type="FloatTriple">
<result><named-type name="FloatTriple" /></result>
<description>
Vector-scalar multiplication.
</description>
</case>

<case first-type="Float" second-type="Length">
<result><named-type name="Length" /></result>
<description>
Multiplication.
</description>
</case>
<case first-type="Length" second-type="Float">
<result><named-type name="Length" /></result>
<description>
Multiplication.
</description>
</case>

<case first-type="Coords" second-type="Float">
<result><named-type name="Coords" /></result>
<description>
Vector-scalar multiplication.
</description>
</case>
<case first-type="Float" second-type="Coords">
<result><named-type name="Coords" /></result>
<description>
Vector-scalar multiplication.
</description>
</case>
<case first-type="Coords" second-type="FloatPair">
<result><named-type name="Length" /></result>
<description>
Standard inner product.
</description>
</case>
<case first-type="FloatPair" second-type="Coords">
<result><named-type name="Length" /></result>
<description>
Standard inner product.
</description>
</case>
<case first-type="FloatPair" second-type="Length">
<result><named-type name="Coords" /></result>
<description>
Scale direction by length.
</description>
</case>
<case first-type="Length" second-type="FloatPair">
<result><named-type name="Coords" /></result>
<description>
Scale direction by length.
</description>
</case>

<case first-type="Coords3D" second-type="Float">
<result><named-type name="Coords3D" /></result>
<description>
Vector-scalar multiplication.
</description>
</case>
<case first-type="Float" second-type="Coords3D">
<result><named-type name="Coords3D" /></result>
<description>
Vector-scalar multiplication.
</description>
</case>
<case first-type="Coords3D" second-type="FloatTriple">
<result><named-type name="Length" /></result>
<description>
Standard inner product.
</description>
</case>
<case first-type="FloatTriple" second-type="Coords3D">
<result><named-type name="Length" /></result>
<description>
Standard inner product.
</description>
</case>
<case first-type="FloatTriple" second-type="Length">
<result><named-type name="Coords3D" /></result>
<description>
Scale direction by length.
</description>
</case>
<case first-type="Length" second-type="FloatTriple">
<result><named-type name="Coords3D" /></result>
<description>
Scale direction by length.
</description>
</case>

<case first-type="Dash" second-type="Float">
<result><named-type name="Dash" /></result>
<description>
Scale.
</description>
</case>
<case first-type="Float" second-type="Dash">
<result><named-type name="Dash" /></result>
<description>
Scale.
</description>
</case>

<case first-type="Transform" second-type="Transform">
<result><named-type name="Transform" /></result>
<description>
Composition.
</description>
</case>
<case first-type="Transform3D" second-type="Transform3D">
<result><named-type name="Transform3D" /></result>
<description>
Composition.
</description>
</case>

<case first-type="Float" second-type="RGB">
<result><named-type name="RGB" /></result>
<description>
Scale components.
</description>
</case>
<case first-type="RGB" second-type="Float">
<result><named-type name="RGB" /></result>
<description>
Scale components.
</description>
</case>
<case first-type="Float" second-type="Gray">
<result><named-type name="Gray" /></result>
<description>
Scale components.
</description>
</case>
<case first-type="Gray" second-type="Float">
<result><named-type name="Gray" /></result>
<description>
Scale components.
</description>
</case>

<case first-type="Float" second-type="SpecularReflection">
<result><named-type name="SpecularReflection" /></result>
<description>
Scale weight.
</description>
</case>
<case first-type="SpecularReflection" second-type="Float">
<result><named-type name="SpecularReflection" /></result>
<description>
Scale weight.
</description>
</case>

<case first-type="Integer" second-type="Integer">
<result><named-type name="Integer" /></result>
<description>
Multiplication.
</description>
</case>
<case first-type="Float" second-type="Integer">
<result><named-type name="Float" /></result>
<description>
Multiplication.
</description>
</case>
<case first-type="Integer" second-type="Float">
<result><named-type name="Float" /></result>
<description>
Multiplication.
</description>
</case>
<case first-type="Length" second-type="Integer">
<result><named-type name="Length" /></result>
<description>
Multiplication.
</description>
</case>
<case first-type="Integer" second-type="Length">
<result><named-type name="Length" /></result>
<description>
Multiplication.
</description>
</case>

</operator-binary> <!-- end of binary "*" -->


<operator-binary op="/">

<case first-type="Float" second-type="Float">
<result><named-type name="Float" /></result>
<description>
Division.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Float" /></result>
<description>
Ratio.
</description>
</case>
<case first-type="Length" second-type="Float">
<result><named-type name="Length" /></result>
<description>
Division.
</description>
</case>

<case first-type="FloatPair" second-type="Float">
<result><named-type name="FloatPair" /></result>
<description>
Division by scalar.
</description>
</case>
<case first-type="Coords" second-type="Length">
<result><named-type name="FloatPair" /></result>
<description>
Directional ratio.
</description>
</case>
<case first-type="Coords" second-type="Float">
<result><named-type name="Coords" /></result>
<description>
Division by scalar.
</description>
</case>

<case first-type="FloatTriple" second-type="Float">
<result><named-type name="FloatTriple" /></result>
<description>
Division by scalar.
</description>
</case>
<case first-type="Coords3D" second-type="Length">
<result><named-type name="FloatTriple" /></result>
<description>
Directional ratio.
</description>
</case>
<case first-type="Coords3D" second-type="Float">
<result><named-type name="Coords3D" /></result>
<description>
Division by scalar.
</description>
</case>

<case first-type="Integer" second-type="Integer">
<result><named-type name="Integer" /></result>
<description>
Integer division.
</description>
</case>
<case first-type="Float" second-type="Integer">
<result><named-type name="Float" /></result>
<description>
Division.
</description>
</case>
<case first-type="Length" second-type="Integer">
<result><named-type name="Length" /></result>
<description>
Division.
</description>
</case>

</operator-binary> <!-- end of binary "/" -->


<operator-binary op="*/">

<case first-type="FloatPair" second-type="FloatPair">
<result><named-type name="FloatPair" /></result>
<description>
Orthogonal projection of first argument on direction given by second argument.
</description>
</case>
<case first-type="FloatPair" second-type="Coords">
<result><named-type name="FloatPair" /></result>
<description>
Orthogonal projection of first argument on direction given by second argument.
</description>
</case>
<case first-type="Coords" second-type="FloatPair">
<result><named-type name="Coords" /></result>
<description>
Orthogonal projection of first argument on direction given by second argument.
</description>
</case>
<case first-type="Coords" second-type="Coords">
<result><named-type name="Coords" /></result>
<description>
Orthogonal projection of first argument on direction given by second argument.
</description>
</case>

<case first-type="FloatTriple" second-type="FloatTriple">
<result><named-type name="FloatTriple" /></result>
<description>
Orthogonal projection of first argument on direction given by second argument.
</description>
</case>
<case first-type="FloatTriple" second-type="Coords3D">
<result><named-type name="FloatTriple" /></result>
<description>
Orthogonal projection of first argument on direction given by second argument.
</description>
</case>
<case first-type="Coords3D" second-type="FloatTriple">
<result><named-type name="Coords3D" /></result>
<description>
Orthogonal projection of first argument on direction given by second argument.
</description>
</case>
<case first-type="Coords3D" second-type="Coords3D">
<result><named-type name="Coords3D" /></result>
<description>
Orthogonal projection of first argument on direction given by second argument.
</description>
</case>

</operator-binary> <!-- end of binary "*/" -->

<operator-binary op="()">

<case first-type="Transform" second-type="Transform">
<result><named-type name="Transform" /></result>
<description>
Composition.
</description>
</case>

<case first-type="Transform3D" second-type="Transform3D">
<result><named-type name="Transform3D" /></result>
<description>
Composition.
</description>
</case>

<case first-type="Function" second-type="Function">
<result><named-type name="Function" /></result>
<description>
Composition.
</description>
</case>

</operator-binary> <!-- end of binary "()" -->


<operator-binary op="&lt;">

<case first-type="Symbol" second-type="Symbol">
<result><named-type name="Boolean" /></result>
<description>
Order predicate.
</description>
</case>
<case first-type="Float" second-type="Float">
<result><named-type name="Boolean" /></result>
<description>
Less than comparison.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Boolean" /></result>
<description>
Less than comparison.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Boolean" /></result>
<description>
Less than comparison (with signed lengths).
</description>
</case>

<case first-type="Coords" second-type="Coords">
<result><named-type name="PathPoint" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>
<case first-type="Coords" second-type="PathPoint">
<result consider-constructor="yes"><named-type name="PathPoint" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>
<case first-type="Coords" second-type="PathSlider">
<result consider-constructor="yes"><named-type name="PathPoint" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>

<case first-type="PolarHandleBase" second-type="Coords">
<result><named-type name="PathPoint" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>
<case first-type="PolarHandleBase" second-type="PathPoint">
<result consider-constructor="yes"><named-type name="PathPoint" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>
<case first-type="PolarHandleBase" second-type="PathSlider">
<result consider-constructor="yes"><named-type name="PathPoint" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>

<case first-type="Coords3D" second-type="Coords3D">
<result><named-type name="PathPoint3D" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>
<case first-type="Coords3D" second-type="PathPoint3D">
<result consider-constructor="yes"><named-type name="PathPoint3D" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>
<case first-type="Coords3D" second-type="PathSlider3D">
<result consider-constructor="yes"><named-type name="PathPoint3D" /></result>
<description>
Attach backward handle to second argument.
</description>
</case>

</operator-binary> <!-- end of binary "&lt;" -->

<operator-binary op="&gt;">

<case first-type="Symbol" second-type="Symbol">
<result><named-type name="Boolean" /></result>
<description>
Order predicate.
</description>
</case>
<case first-type="Float" second-type="Float">
<result><named-type name="Boolean" /></result>
<description>
Greater than comparison.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Boolean" /></result>
<description>
Greater than comparison.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Boolean" /></result>
<description>
Greater than comparison (with signed lengths).
</description>
</case>

<case first-type="Coords" second-type="Coords">
<result><named-type name="PathPoint" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>
<case first-type="PathPoint" second-type="Coords">
<result consider-constructor="yes"><named-type name="PathPoint" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>
<case first-type="PathSlider" second-type="Coords">
<result consider-constructor="yes"><named-type name="PathPoint" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>

<case first-type="Coords" second-type="PolarHandleBase">
<result><named-type name="PathPoint" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>
<case first-type="PathPoint" second-type="PolarHandleBase">
<result consider-constructor="yes"><named-type name="PathPoint" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>
<case first-type="PathSlider" second-type="PolarHandleBase">
<result consider-constructor="yes"><named-type name="PathPoint" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>

<case first-type="Coords3D" second-type="Coords3D">
<result><named-type name="PathPoint3D" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>
<case first-type="PathPoint3D" second-type="Coords3D">
<result consider-constructor="yes"><named-type name="PathPoint3D" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>
<case first-type="PathSlider3D" second-type="Coords3D">
<result consider-constructor="yes"><named-type name="PathPoint3D" /></result>
<description>
Attach forward handle to first argument.
</description>
</case>

</operator-binary> <!-- end of binary "&gt;" -->


<operator-binary op="=">

<case first-type="Symbol" second-type="Symbol">
<result><named-type name="Boolean" /></result>
<description>
Equality test.
</description>
</case>
<case first-type="Float" second-type="Float">
<result><named-type name="Boolean" /></result>
<description>
Equality test.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Boolean" /></result>
<description>
Equality test.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Boolean" /></result>
<description>
Equality test.
</description>
</case>

<case first-type="Class" second-type="Class">
<result><named-type name="Boolean" /></result>
<description>
Same type test.
</description>
</case>

</operator-binary> <!-- end of binary "=" -->


<operator-binary op="=/=">

<case first-type="Symbol" second-type="Symbol">
<result><named-type name="Boolean" /></result>
<description>
Inequality test.
</description>
</case>
<case first-type="Float" second-type="Float">
<result><named-type name="Boolean" /></result>
<description>
Inequality test.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Boolean" /></result>
<description>
Inequality test.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Boolean" /></result>
<description>
Inequality test.
</description>
</case>

<case first-type="Class" second-type="Class">
<result><named-type name="Boolean" /></result>
<description>
Not same type test.
</description>
</case>

</operator-binary> <!-- end of binary "=/=" -->


<operator-binary op="≠">

<case first-type="Symbol" second-type="Symbol">
<result><named-type name="Boolean" /></result>
<description>
Inequality test.
</description>
</case>
<case first-type="Float" second-type="Float">
<result><named-type name="Boolean" /></result>
<description>
Inequality test.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Boolean" /></result>
<description>
Inequality test.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Boolean" /></result>
<description>
Inequality test.
</description>
</case>

<case first-type="Class" second-type="Class">
<result><named-type name="Boolean" /></result>
<description>
Not same type test.
</description>
</case>

</operator-binary> <!-- end of binary "≠" -->


<operator-binary op="&lt;=">

<case first-type="Symbol" second-type="Symbol">
<result><named-type name="Boolean" /></result>
<description>
Reflexive order predicate.
</description>
</case>
<case first-type="Float" second-type="Float">
<result><named-type name="Boolean" /></result>
<description>
Test less than or equal.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Boolean" /></result>
<description>
Test less than or equal.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Boolean" /></result>
<description>
Test less than or equal.
</description>
</case>

</operator-binary> <!-- end of binary "&lt;=" -->


<operator-binary op="&gt;=">

<case first-type="Symbol" second-type="Symbol">
<result><named-type name="Boolean" /></result>
<description>
Reflexive order predicate.
</description>
</case>
<case first-type="Float" second-type="Float">
<result><named-type name="Boolean" /></result>
<description>
Test greater than or equal.
</description>
</case>
<case first-type="Integer" second-type="Integer">
<result><named-type name="Boolean" /></result>
<description>
Test greater than or equal.
</description>
</case>
<case first-type="Length" second-type="Length">
<result><named-type name="Boolean" /></result>
<description>
Test greater than or equal.
</description>
</case>

</operator-binary> <!-- end of binary "&gt;=" -->


<operator-binary op="and">

<case first-type="Boolean" second-type="Boolean">
<result><named-type name="Boolean" /></result>
<description>
Conjunction.
</description>
</case>

</operator-binary> <!-- end of binary "and" -->


<operator-binary op="or">

<case first-type="Boolean" second-type="Boolean">
<result><named-type name="Boolean" /></result>
<description>
Disjunction.
</description>
</case>

</operator-binary> <!-- end of binary "or" -->


<operator-binary op="xor">

<case first-type="Boolean" second-type="Boolean">
<result><named-type name="Boolean" /></result>
<description>
Exclusive or.
</description>
</case>

</operator-binary> <!-- end of binary "or" -->


