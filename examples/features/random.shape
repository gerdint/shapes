•stdout << `Now is ´ << [sprintf `%H:%M´ (•time)] << `¢n´

•stdout << (•randomdevice) << `, ´ << (•randomdevice) << `, ´ << (•randomdevice) << `, ´ << (•randomdevice) << `¢n´

seed: [newRandom (•time)]
•rand1: seed
•rand2: seed
|**•rand3: [newRandom (•time)]
•rand3: [devRandom •randomdevice]
•stdout << (•rand1) << `=´ << (•rand2) << `, ´ << (•rand1) << `=´ << (•rand2) << `¢n´
•stdout << (•rand3) << `, ´ << [random2D •rand3] << `¢n´
•stdout << [random1D •rand1] << `=´ << [random1D •rand2] << `, ´ << [random2D •rand1] << `=´ << [random2D •rand2] << `¢n´

##needs conssupport

•page << [stroke
           [foldsl \ pth i •st .> pth--(i*1cm,[random1D •st]*1cm)
	           emptypath
		   •rand3
		   [consify [range '0 '12]]]]

|** Nowadays, we don't need conssupport for this, since foldsl is also in the kernel:
•page << [stroke
           [[range '0 '12].foldsl \ pth i •st .> pth--(i*1cm,(2+[random1D •st])*1cm)
                 	           emptypath
				   •rand3]]
                 
