##needs circle
##needs arrowheads

•rand: [newRandom (•time)]

nIter: '40

{
 
  pth: [immerse [circle 1cm]]
/**
  pth: [[range '0 '3].foldl
   \ pile e .>  { sl: [pth0 e*1.]  pile--(+sl.rv*sl.rT)<(sl.p + 0.1mm*[random3D])>(+sl.v*sl.T)
   emptypath3D]--cycle
**/
  •page << view [] [stroke pth]

  •timer: newTimer
  •page <<
  (
  @width: 0.2bp
  |
  [[range '1 nIter].foldsl
   \ pile e •randstate .>
   {
    p: 1.4cm * [random3D •randstate]
|**    tim: newTimer <<
    sl: [continuous_approximator pth p]
|**    tim;
    a: (p - sl.p) /_ sl.t
    [debuglog_before
      [sprintf `%g°¢n´ a / 1° ] |**  [sprintf `, %gs¢n´ tim]
      pile & [view @stroking:[rgb 0 [min 1 [abs a - 90°]/0.1°] 0] | [stroke p--sl.p]]]
   }
   null
   •rand
  ]
  )
  timer: •timer;
  •stdout << [sprintf `Average time: %gs¢n´  timer / nIter]
}

randPath: \ n •randstate .>
 [[range '1 n].foldsl
  \ pile e •st .>  { h: 3mm*[random3D •st]   pile--(+~h)<(1cm*[random3D •st])>(+h) }
  emptypath3D •randstate]--cycle

{
  sh: [shift (3cm,0cm,0cm)]
  pth: sh [] [randPath '10 •rand]
  •page << view [] [stroke pth]
  •page << @stroking:rgb_RED | ( view [] [stroke controlling [] pth] )

  •timer: newTimer
  •page <<
  (
  @width: 0.2bp
  |
  [[range '1 nIter].foldsl
   \ pile e •randstate .>
   {
    p: sh [] 1.4cm * [random3D •randstate]
|**    tim: newTimer
    sl: [continuous_approximator pth p]
|**    tim;
    a: (p - sl.p) /_ sl.t
    [debuglog_before
      [sprintf `%g°¢n´ a / 1° ] |**  [sprintf `, %gs¢n´ tim]
      pile & [view @stroking:[rgb 0 [min 1 [abs a - 90°]/0.1°] 0] | [stroke p--sl.p]]]
   }
   null
   •rand
  ]
  )
  timer: •timer;
  •stdout << [sprintf `Average time: %gs¢n´  timer / nIter]
}
