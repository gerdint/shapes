|***************************************************************************
|** This is a file that is used to generate a particular form of the logo.
|**
|** This form of the logo has bent text above and below, and looks rather
|** different from the other logos.  It can be used in printed material like
|** theses, course material, and books.  (The other logos are used in
|** presentations and posters.)
|***************************************************************************
##author Henrik Tidefelt

##needs rtlogo_elements
##needs circle

  @stroking:gray_BLACK
& @nonstroking:gray_BLACK
|
{
  /** Recall where this places the regulator...
   **/
  [makeRegulator •page]
}

smallFont: @text_font:font_HELVETICA_BOLD & @text_size:0.265r & @text_horizontalscaling:1.0

|** The bent text is drawn along circular arcs, and we put the text in contact with the regulator's box at
|** the center coordinate.
circleCenter: (0,0.92r)
innerRadius: 1.15r
outerRadius: innerRadius + (smallFont|0.7*@text_size)
ballSpace: 0.2

{
  /** This is the upper banner.
   ** Since the text is placed on the outside of the circle, no special kerning should be needed.
   **/

  text: smallFont | [kerning `•´ ~ballSpace [kern `REGLERTEKNIK´] ~ballSpace `•´ ~ballSpace [kern `AUTOM´] 0.08 `A´ 0.13 [kern `TIC CONTROL´] ~ballSpace `•´]
  baseline: [shift circleCenter] [] [rotate 90° + 0.5*[xmax [bbox ( newText << text )]]/innerRadius] [] reverse [] [circle innerRadius]

|**  •page << @width:0bp & @stroking:rgb_RED | [stroke baseline]
|**  •page << @width:0bp | [stroke (~1r,[baseline 0].p.y)--(1r,(+0r))]
  
  /** At the time of writing, there is no abstraction for placing text along a path, but this is the
   ** standard way of doing it.
   **/
  •page <<
   [text.list.foldl
      \ pile distChar .>
       {
         c: ( newText << distChar.cdr )
         sl: [baseline distChar.car + 0.5*[xmax [bbox c]]]
         pile
         &
         [[shift sl.p]()[rotate [angle sl.t]] [centerx c] ]
       }
      null]
}

{
  /** This is the lower banner.
   ** Since the text is placed on the inside of the circle, some negative kerning must be used.
   **/
  stdkern: (0.7*(@text_size/outerRadius))

  text: smallFont | ( @text_characterspacing:stdkern*@text_size | [kerning [kern `LINK´] kernKO [kern `ÖPING´]] )

  baseline: [shift circleCenter] [] [rotate ~90° - 0.5*[xmax [bbox (newText << text)]]/outerRadius] [] [circle outerRadius]

|**  •page << @width:0bp & @stroking:rgb_RED | [stroke baseline]
  
  /** At the time of writing, there is no abstraction for placing text along a path, but this is the
   ** standard way of doing it.
   **/
  •page <<
   [text.list.foldl
      \ pile distChar .>
       {
         c: ( newText << distChar.cdr )
         sl: [baseline distChar.car + 0.5*[xmax [bbox c]]]
         pile
         &
         [[shift sl.p]()[rotate [angle sl.t]] [centerx c] ]
       }
      null]
}
