This optimization problem is to find a point inside two triangles.

It is not a big restriction to assume that all coordinates are positive since one can simply shift the coordinates.

The problem is set up as a problem in three variables, where the first two are the coordinates, and the last is a slack variable that appears in every constaint.

To make the origin feasible (this is assumed by the stupid algorithm), the right hand side is increased until all elements are positive.  The common slack, being maximized, should turn out bigger than the amount added to the right hand side to reflect a feasible solution.

Note that the "normals" defining the triangles' outward normals must be normalized!

Original problem:
Triangle 1:
( -1  0 ) xy <= -3    |** meaning x >= 3
(  0 -1 ) xy <= -2    |** meaning y >= 2
(  1/R2 1/R2 ) xy <= 5

Triangle 1:
( -1  0 ) xy <= -2    |** meaning x >= 2
(  0 -1 ) xy <= -2.5    |** meaning y >= 2.5
(  1/R2 1/R2 ) xy <= 4.5

I have checked that the intersection is not empty, and is centered near ( 3.25, 2.75 ).

Note that one enters a minimization problem, so the sign of the objective must be changed.

The minimum of the right hand side is -3, so 3 is added.

===========
3 6
0. 0. -1.
-1.  0. 1. -3. 3. +
 0. -1. 1. -2. 3. +
 0.5 sqrt 0.5 sqrt 1. 5. 3. +
-1.  0. 1. -2. 3. +
 0. -1. 1. -2.5 3. +
 0.5 sqrt 0.5 sqrt 1. 4.5 3. +
