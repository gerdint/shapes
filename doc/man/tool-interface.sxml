<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE man [
<!ENTITY bullet "<char-bullet />">
<!ENTITY str-open "<char-str-open />">
<!ENTITY str-close "<char-str-close />">
]>
<man>
	<manhead>
		<prog-name>shapes</prog-name>
		<man-section>1</man-section>
		<modification-date>2007-12-18</modification-date>
		<left-footer>Tiddes</left-footer>
		<center-header>The Shapes language compiler</center-header>
	</manhead>

	<section>
		<title>Name</title>
		<body>
			<p>shapes <char-em-dash /> Compile a <str-Shapes /> source to <str-PDF />.</p>
		</body>
	</section>

	<section>
		<title>Synopsis</title>
		<body>
			<synopsis-table>
				<synopsis-case><prog-name>shapes</prog-name> <syntax-name>option</syntax-name><bnf>*</bnf> <replacable>source</replacable></synopsis-case>
				<synopsis-case><prog-name>shapes</prog-name> <syntax-name>option</syntax-name><bnf>*</bnf></synopsis-case>
				<synopsis-case><prog-name>shapes</prog-name> <bnf>(</bnf> <syntax-name>options</syntax-name> <bnf>|</bnf> <syntax-name>file-request</syntax-name> <bnf>)*</bnf> </synopsis-case>
			</synopsis-table>
		</body>
	</section>

	<section>
		<title>Description</title>
		<body>
			<p><prog-name>shapes</prog-name> compiles a source file written in the <str-Shapes /> language (with file name extension <filename>shape</filename>).  On success, this results in a <str-PDF /> file containing a viewable representation of the graphics described by the source.</p>
		</body>
	</section>

	<section>
		<title>Command line options</title>
		<top>
			<p>Command line options fall into two cathegories, most of which were referred to as <syntax-name>option</syntax-name> above.  The others, found in the last subsection below, are used to request which files would be used under given circumstances, and will cause the compiler to terminate without processing any files, these options were referred to as <syntax-name>file-request</syntax-name> above.</p>
		</top>
 		<section>
			<title>Files</title>
			<body>
				<command-line-option-list>
					<command-line-item>
						<parameters flag="source"></parameters>
						<description>
							<p>When the source is specified as the last command line argument, it may have either of the forms <filename>indir/basename</filename>, <filename>indir/basename.</filename>, or <filename>indir/basename.shape</filename>; they all mean the same (here <filename>indir/</filename> just indicates that the file may be located in another directory).  This also specifies a filename base (excluding <filename>indir/</filename> and the <filename>.shape</filename> suffix), which in turn provides names for all other files involved.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--tmpdir"> <replacable>dir</replacable></parameters>
						<description>
							<p>Specify directory for temporary files.  See also the environment variable SHAPESTMPDIR.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--outdir"> <replacable>dir</replacable></parameters>
						<description>
							<p>Specify directory for products.  Defaults to current working directory.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--needpath"> <replacable>dir</replacable></parameters>
						<short-parameter flag="-N">dir</short-parameter>
						<description>
							<p>Add <replacable>dir</replacable> to the end of the search path for language extension sources.  See also the environment variable SHAPESINPUTS.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--base"> <replacable>filenamebase</replacable></parameters>
						<description>
							<p>Specify the filename base to derive other filenames from.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--in"> <replacable>file</replacable></parameters>
						<description>
							<p>Specify the input source.  Defaults to the basename with the suffix <filename>.shape</filename> in the current directory.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--prepend"> <replacable>str</replacable></parameters>
						<description>
							<p>Prepend the given string to the input source.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--out"> <replacable>file</replacable></parameters>
						<description>
							<p>Specify the destination file.  Defaults to the basename with the suffix <filename>.pdf</filename> in the output directory.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--labeldb"> <replacable>file</replacable></parameters>
						<description>
							<p>Specify the file where to store labels between iterations.  Defaults to the basename with the suffix <filename>.labels.pdf</filename> in the output directory.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--afmout"> <replacable>file</replacable></parameters>
						<description>
							<p>Specify the file where to store generated font metrics, would there be any.  Defaults to the basename with the suffix <filename>.afm</filename> in the output directory.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--fontmetricspath"> <replacable>dir</replacable></parameters>
						<short-parameter flag="-M">dir</short-parameter>
						<description>
							<p>Add <replacable>dir</replacable> to the end of the search path for font metrics.</p>
						</description>
				</command-line-item>
					<command-line-item>
						<parameters flag="--no-resources"></parameters>
						<description>
							<p>Inhibit use of files installed with the <str-Shapes /> program.  This applies both to language extensions and font metric files.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--no-iteration"></parameters>
						<description>
							<p>Inhibit creation of the file with labels saved from one program run to another.  This behavior is implied if the label database filename is undefined.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="&lt;stdin&gt;"></parameters>
						<description>
							<p>The special file <filename>stdin</filename> is used when the input source is not determined in any other way.  This means that the filename base must not be defined, so sometimes <filename>#shapes</filename> has to be used instead.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="&lt;stdout&gt;"></parameters>
						<description>
							<p>Since the user may write charater data on the special file <filename>stdout</filename>, <filename>stdout</filename> cannot be used for the produced <str-PDF /> file.  This should not be a major inconvenience since the <str-PDF /> format is not suited for stream editing anyway.  Consider using the --out option when the input is taken from <filename>stdin</filename>.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--debuglog"> <replacable>file</replacable></parameters>
						<parameters flag="--debuglog-stderr"></parameters>
						<parameters flag="--debuglog-stdout"></parameters>
						<description>
							<p>Specify file for the user's debug log messages.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
		</section>
 		<section>
			<title>Tolerances and other parameters</title>
			<body>
				<command-line-option-list>
					<command-line-item>
						<parameters flag="--seed"> <replacable>s</replacable></parameters>
						<description>
							<p>Initializes the global random number generator by calling the srand function..</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--arcdelta"> <replacable>length</replacable></parameters>
						<description>
							<p>Set maximum integration step length to use when integrating along paths.  Defaults to <physical><scalar>0.1</scalar><unit>bp</unit></physical>.  See also --dtmin.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--dtmin"> <replacable>low</replacable></parameters>
						<description>
							<p>Set minimum integration step to use when integrating along paths.  Defaults to <sci-fmt mantissa="1" exp="-4" />.  See also --arcdelta.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--dtminerror"></parameters>
						<parameters flag="--no-dtminerror"></parameters>
						<description>
							<p>Control whether bumping up too short steplengths in integration along paths shall be considered an error.  See also --dtmin.</p>
							<p><b>Rationale:</b> By default, it is considered an error if a length-measuring loop over one simple cubic spline requires too small steps.  The number of steps required depends on the arc-delta setting.  However, if changing arc-delta is not what one wants, and one cannot create the spline using more points, then a last resort is to inhibit the error using this option.  Note, however, that evaluating a program this way may be a process that does not terminate, practically speaking.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--splicingtol"> <replacable>tol</replacable></parameters>
						<description>
							<p>Tolerance used when a 3D scene is viewed in 2D.  Defaults to <physical><scalar><sci-fmt mantissa="1" exp="-5" /></scalar><unit>bp</unit></physical>.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--overlaptol"> <replacable>tol</replacable></parameters>
						<description>
							<p>Tolerance used when a 3D scene is viewed in 2D.  Defaults to <physical><scalar><sci-fmt mantissa="1" exp="-3" /></scalar><unit>bp</unit></physical>.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--fmguesserror"></parameters>
						<parameters flag="--no-fmguesserror"></parameters>
						<description>
							<p>Control whether guessing font metrics for (more or less) strange characters shall be considered an error.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
		</section>
 		<section>
			<title>Verbosity</title>
			<body>
				<command-line-option-list>
					<command-line-item>
						<parameters flag="--bytecolumn"></parameters>
						<description>
							<p>Report source file columns in bytes rather than complete UTF-8 characters.  By default, column indicates the character count from the beginning of the line.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--unit"> <replacable>unit-name</replacable></parameters>
						<description>
							<p>Set the unit to use for textual representation of lengths.  Defaults to cm.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--showfiles"></parameters>
						<description>
							<p>Print the chain of used sources.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--stats"></parameters>
						<parameters flag="--no-stats"></parameters>
						<description>
							<p>Control printing of execution statistics, such as memory and time usage.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
		</section>
 		<section>
			<title>Versions</title>
			<body>
				<command-line-option-list>
					<command-line-item>
						<parameters flag="--v"> <replacable>mode-ver</replacable></parameters>
						<short-parameter flag="-v">mode-ver</short-parameter>
						<description>
							<p>Set the highest <str-PDF /> version to use in output.  The <replacable>mode-ver</replacable> parameter shall begin with either of the letters <quote>e</quote> (error), <quote>w</quote> (warning), or <quote>s</quote> (silent).  The letter tells how the compiler shall react when it is not allowed to use a requested feature in the output, and must consider using a simpler replacement.  After the letter, a <str-PDF /> version shall follow.  Valid values are <quote>1.3</quote> and <quote>1.3</quote>.  Hence, for instance, <quote>w1.3</quote> is a valid <replacable>mode-ver</replacable> value.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--version"></parameters>
						<description>
							<p>Print version information about the compiler, and exit.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
		</section>
 		<section>
			<title>Preview</title>
			<body>
				<p>Shapes can launch xpdf or invoke the MacOS <prog-name>open</prog-name> command to show the resulting graphics.  In a future version, it may be possible to specify an arbitrary command to be issued, which could look like this:</p>
<command-line>
shapes --viewer 'open -a TeXShop %' myfile.shapes
</command-line>
        <command-line-option-list>
					<command-line-item>
						<parameters flag="--open"></parameters>
						<description>
							<p>Use the open program to open the result using a system default viewer for <str-PDF /> files.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--open-a"> <replacable>program</replacable></parameters>
						<description>
							<p>Like --open, but here the application to use is specified by the user.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--xpdf"></parameters>
						<description>
							<p>Use the xpdf program to preview the result.  The program is run in remote server mode.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--xpdf-remote"> <replacable>name</replacable></parameters>
						<description>
							<p>Set the name to use when running the xpdf program in remote mode.  Defaults to the output filename.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--xpdf-no-server"> <replacable>name</replacable></parameters>
						<description>
							<p>Inhibit use of the remote server mode.  A new xpdf window will appear each time.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--xpdf-reload"></parameters>
						<description>
							<p>Make the xpdf server reload rather than raise.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--xpdf-quit"></parameters>
						<description>
							<p>Make the xpdf server quit rather than show your graphics.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
		</section>
 		<section>
			<title>User level debugging</title>
			<body>
				<command-line-option-list>
					<command-line-item>
						<parameters flag="--no-backtrace"></parameters>
						<description>
							<p>Turn off the backtrace printed when the program reports a runtime error.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--evaltrace"></parameters>
						<description>
							<p>Print information about each expression about to be evaluated.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--evalbacktrace"></parameters>
						<description>
							<p>As --evaltrace, but with a backtrace printed along with each expression.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
 		</section>
 		<section>
			<title>Compiler developer debugging</title>
			<body>
				<command-line-option-list>
					<command-line-item>
						<parameters flag="--shapesdebug"></parameters>
						<description>
							<p>Turn on debug prints in the <str-Shapes /> lexer.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--yydebug"></parameters>
						<description>
							<p>Same as --shapesdebug.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--systemdebug"></parameters>
						<description>
							<p>Turn on system debug messages.  The messages are written to stderr.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--afmdebug"></parameters>
						<description>
							<p>Turn on debug prints in the font metrics scanner.  Primarily for development use.  See also --afmmessages.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--afmmessages"></parameters>
						<description>
							<p>Turn on font metrics debug messages.  The messages are written to stderr.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--debugstep"> <replacable>step</replacable></parameters>
						<description>
							<p>Set the debug step counter.  For compiler development only.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
		</section>
 		<section>
			<title>Garbage collection</title>
			<body>
				<p>In the end, when garbage collection is implemented, there will be options for controlling the gc behavior here.  At the moment, there is only a dummy option here.</p>
				<command-line-option-list>
					<command-line-item>
						<parameters flag="--no-memclean"></parameters>
						<description>
							<p>Inhibit cleaning up memory before terminating the compilation process.</p>
							<p><b>Rationale:</b> If the program seems to do stupid things after completing evaluation, it is possible that the cleaning-up process has caused a double free or access to freed memory.  While waiting for a fix, the problem can be handled by specifying this option, and thereby omitting the clean-up process entirely.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
		</section>
 		<section>
			<title>File requests</title>
			<body>
				<command-line-option-list>
 					<command-line-item>
						<parameters flag="--which-in"/>
						<description>
							<p>Request the input source.</p>
						</description>
					</command-line-item>
 					<command-line-item>
						<parameters flag="--which-out"/>
						<description>
							<p>Request the input source.</p>
						</description>
					</command-line-item>
 					<command-line-item>
						<parameters flag="--which-texjob"/>
						<description>
							<p>Request the <str-TeX /> job basename.</p>
						</description>
					</command-line-item>
 					<command-line-item>
						<parameters flag="--which-labeldb"/>
						<description>
							<p>Request the label database to keep generated labels between iterations.</p>
						</description>
					</command-line-item>
 					<command-line-item>
						<parameters flag="--which-afmout"/>
						<description>
							<p>Request the file where generated font metrics will be stored.</p>
						</description>
					</command-line-item>
					<command-line-item>
						<parameters flag="--which"> <replacable>source</replacable></parameters>
						<description>
							<p>Request a particular file.</p>
						</description>
					</command-line-item>
				</command-line-option-list>
			</body>
		</section>
	</section>

	<section>
		<title>Environment variables</title>
		<body>
			<env-variable-list>
				<env-variable-item>
					<name>SHAPESINPUTS</name>
					<description>
						<p>contains a search path used for requested source files.  It usually consists of directories with language extension files (with the <filename>.shext</filename> extension).  On typical installations, the extension files shipped with the compiler are found using another mechanism.</p>
					</description>
				</env-variable-item>
				<env-variable-item>
					<name>SHAPESTMPDIR</name>
					<description>
						<p>tells, when present, where to create temporary files.  In particular this concerns files related to label creation.  Note, however, that the label database file (with the <filename>.labels.pdf</filename> extension) is put in the output directory since it is not considered a temporary file.  The environment variable is overridden by the --tmpdir command line option.  When undefined, it defaults to the current directory.</p>
					</description>
				</env-variable-item>
				<env-variable-item>
					<name>SHAPESFONTMETRICS</name>
					<description>
						<p>tells where to search for font metrics files.  Font metrics for the standard fonts in <str-PDF /> are distributed with the compiler, and on typical installations these are found using another mechanism.</p>
					</description>
				</env-variable-item>
				<env-variable-item>
					<name>TEXINPUTS</name>
					<description>
						<p>is manipulated locally to enable <str-TeX /> to find files located relative to the <str-Shapes /> source, although the <str-LaTeX /> source used for label creation may be placed in a different directory.</p>
					</description>
				</env-variable-item>
			</env-variable-list>
		</body>
	</section>

	<section>
		<title>Examples</title>
		<section>
			<title>Basic use</title>
			<body>
				<p>Suppose there is a source called <filename>hi.shape</filename> in the current working directory.  Then there are three ways to specify this file to the compiler.  One may give the full filename:</p>
<command-line>
  shapes hi.shape
</command-line>
				<p>or just to the point your shell completion will take you:</p>
<command-line>
  shapes hi.
</command-line>
				<p>or exclude the suffix altogether:</p>
<command-line>
  shapes hi
</command-line>
			</body>
		</section>
		<section>
			<title>Use with xpdf</title>
			<body>
				<p>To use the <prog-name class="other">xpdf</prog-name> program for preview, the previous example can be extended as:</p>
<command-line>
  shapes --xpdf hi.shape
</command-line>
			</body>
		</section>
		<section>
			<title>Use with stdin</title>
			<body>
				<p>The following can be used to generate a small <str-PDF />-label from a <str-LaTeX /> string, without littering the current working directory with the <str-LaTeX />-related files:</p>
<command-line>
echo '&bullet;page &lt;&lt; (TeX &str-open;$x^{2}$&str-close;)' | shapes --tmpdir /tmp --out label.pdf
</command-line>
			</body>
		</section>
		<section>
			<title>The test suite</title>
			<body>
				<p>When testing the compiler on the bundled tests, the compiler is invoked something like this:</p>
<command-line>
shapes --no-resources --needpath ../../resources/extensions/ --fontmetricspath ../../resources/fontmetrics/ \
       --tmpdir tmp/ --outdir out/ hello.shape
</command-line>
      <p>The first three options ensure that extension files and font metrics are not used from a previous installation.  This example assumes that environment variables are not used to provide search paths.</p>
			</body>
		</section>
	</section>


	<section>
		<title>Author</title>
		<body>
			<p>Most of the code was written by Henrik Tidefelt.  Portability and distribution was provided by Gustaf Hendeby.</p>
		</body>
	</section>

	<section>
		<title>See also</title>
		<body>
			<see-also-items>
				<see-also><manpage tool="xpdf" section="1" /></see-also>
				<see-also><manpage tool="open" section="1" /></see-also>
			</see-also-items>
		</body>
	</section>

</man>
