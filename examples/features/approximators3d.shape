/** This file is part of Shapes.
 **
 ** Shapes is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** any later version.
 **
 ** Shapes is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with Shapes.  If not, see <http://www.gnu.org/licenses/>.
 **
 ** Copyright 2008 Henrik Tidefelt
 **/

•rand: [newRandom (•time)]

nIter: '40

{

  pth: [immerse [circle 1cm]]
/**
  pth: [[range '0 '3].foldl
   \ pile e →  { sl: [pth0 e*1.]  pile--(+sl.rv*sl.rT)<(sl.p + 0.1mm*[random3D])>(+sl.v*sl.T)
   emptypath3D]--cycle
**/
  •page << view [] [stroke pth]

  •timer: newTimer
  •page <<
  (
  @width: 0.2bp
  |
  [[range '1 nIter].foldsl
   \ pile e •randstate →
   {
    p: 1.4cm * [random3D •randstate]
|**    tim: newTimer <<
    sl: [approximator pth p]
|**    tim;
    a: (p - sl.p) /_ sl.T
    [debuglog_before
      [sprintf `%g°´+"{n} a / 1° ] |**  [sprintf `, %gs´+"{n} tim]
      pile & [view @stroking:[rgb 0 [min 1 [abs a - 90°]/0.1°] 0] | [stroke p--sl.p]]]
   }
   null
   •rand
  ]
  )
  timer: •timer;
  •stdout << [sprintf `Average time: %gs´  timer / nIter] << "{n}
}

randPath: \ n •randstate →
 [[range '1 n].foldsl
  \ pile e •st →  { h: 3mm*[random3D •st]   pile--(+~h)<(1cm*[random3D •st])>(+h) }
  emptypath3D •randstate]--cycle

{
  sh: [shift (3cm,0cm,0cm)]
  pth: sh [] [randPath '10 •rand]
  •page << view [] [stroke pth]
  •page << @stroking:RGB_RED | ( view [] [stroke controlling [] pth] )

  •timer: newTimer
  •page <<
  (
  @width: 0.2bp
  |
  [[range '1 nIter].foldsl
   \ pile e •randstate →
   {
    p: sh [] 1.4cm * [random3D •randstate]
|**    tim: newTimer
    sl: [approximator pth p]
|**    tim;
    a: (p - sl.p) /_ sl.T
    [debuglog_before
      [sprintf `%g°´+"{n} a / 1° ] |**  [sprintf `, %gs´+"{n} tim]
      pile & [view @stroking:[rgb 0 [min 1 [abs a - 90°]/0.1°] 0] | [stroke p--sl.p]]]
   }
   null
   •rand
  ]
  )
  timer: •timer;
  •stdout << [sprintf `Average time: %gs´  timer / nIter] << "{n}
}
