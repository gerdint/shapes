/** This file is part of Shapes.
 **
 ** Shapes is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** any later version.
 **
 ** Shapes is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with Shapes.  If not, see <http://www.gnu.org/licenses/>.
 **
 ** Copyright 2008 Henrik Tidefelt
 **/

MetaPostArrow: \ p ahLength:void ahAngle:30° fillAsStroking:true →
 (@blend:BLEND_NORMAL
  |
  { z: [p 0].p
    theLength: [if [typeof ahLength]=§Void @width*6 ahLength]
    l: [min theLength 0.9*[abs p]]
    e: [p 0]--[p l]
    (>
      picture: @nonstroking:[if fillAsStroking @stroking @nonstroking]
               |
               [fill [[shift z]*[rotate ahAngle*0.5]*[shift ~z] e]--[reverse [[shift z]*[rotate ~ahAngle*0.5]*[shift ~z] e]]--cycle]
      cut: 2*@width
    <)
  }
 )

triangleArrow: \ p ahLength:void ahAngle:30° fillAsStroking:true →
 (@blend:BLEND_NORMAL
  |
  { sl: [p 0]
    z: sl.p
    d: [angle sl.T]
    theLength: [if [typeof ahLength]=§Void @width*6 ahLength]
    (>
      picture: @nonstroking:[if fillAsStroking @stroking @nonstroking]
               |
               [fill (z+[dir d - ahAngle/2]*theLength)--z--(z+[dir d + ahAngle/2]*theLength)--cycle]
      cut: 2*@width
    <)
  }
 )

##needs circle

twoCircles3DArrow:
{
  ztf: \ z0 →
  {
    z: [normalized z0]
    x: [orthogonal z]
    y: [cross z x]
    [affinetransform3D x y z (0cm,0cm,0cm)]
  }

  \ p ahLength:void ahAngle:30° →
    { z: [p 0]
      theLength: [if [typeof ahLength]=§Void @width*6 ahLength]
      l: [min theLength*[cos ahAngle] 0.9*[abs p]]
      e: [p 0]--[p l]
      (>
        picture: [stroke [[shift [p 0.5*theLength*[cos ahAngle]].p]*[ztf [p 0.5*theLength*[cos ahAngle]].T] [immerse [circle 0.5*theLength*[sin ahAngle]]]]]
                 &
		 [stroke [[shift [p theLength*[cos ahAngle]].p]*[ztf [p theLength*[cos ahAngle]].T] [immerse [circle theLength*[sin ahAngle]]]]]
        cut: 0mm
      <)
    }
}

MetaPostArrow3D: \ normal p ahLength:void ahAngle:30° →
  { z: [p 0].p
    theLength: [if [typeof ahLength]=§Void @width*6 ahLength]
    l: [min theLength 0.9*[abs p]]
    e: [p 0]--[p l]
    rev: [reverse [[shift z]*[rotate3D dir:normal angle: ~ahAngle*0.5]*[shift ~z] e]]
    (>
      picture: [fill [[shift z]*[rotate3D dir:normal angle:ahAngle*0.5]*[shift ~z] e]--rev--cycle]
               &
               [fill [[shift z]*[rotate3D dir:normal angle:ahAngle*0.5]*[shift ~z] e]--[reverse [[shift z]*[rotate3D dir:normal angle: ~ahAngle*0.5]*[shift ~z] e]]--cycle]
      cut: 0.8*[cos ahAngle*0.5]*theLength
    <)
  }

triangleArrow3D: \ p normal:(0,0,1) ahLength:void ahAngle:30° →
  { sl: [p 0]
    z: sl.p
    l: [if [typeof ahLength]=§Void @width*6 ahLength]
    rotDir1: [cross sl.T [orthogonal sl.T]]
    (>
      picture:
        { rotDir: rotDir1
          fill [] [shift z] [] ( (0m,0m,0m)--([rotate3D dir:rotDir angle:ahAngle*0.5][](l*sl.T))--([rotate3D dir:rotDir angle:~ahAngle*0.5][](l*sl.T))--cycle ) }
	&
	{ rotDir: [cross sl.T rotDir1]
          fill [] [shift z] [] ( (0m,0m,0m)--([rotate3D dir:rotDir angle:ahAngle*0.5][](l*sl.T))--([rotate3D dir:rotDir angle:~ahAngle*0.5][](l*sl.T))--cycle ) }
      cut: 2*@width
    <)
  }
