<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="formats/html.xsl"?>

<!-- This file is part of Shapes.                                           -->
<!--                                                                        -->
<!-- Shapes is free software: you can redistribute it and/or modify         -->
<!-- it under the terms of the GNU General Public License as published by   -->
<!-- the Free Software Foundation, either version 3 of the License, or      -->
<!-- any later version.                                                     -->
<!--                                                                        -->
<!-- Shapes is distributed in the hope that it will be useful,              -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of         -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          -->
<!-- GNU General Public License for more details.                           -->
<!--                                                                        -->
<!-- You should have received a copy of the GNU General Public License      -->
<!-- along with Shapes.  If not, see <http://www.gnu.org/licenses/>.        -->
<!--                                                                        -->
<!-- Copyright 2008 Henrik Tidefelt                                         -->


<book>
	<title>blockdraw_wfo</title>
	<description>
		<p>General purpose layout tools originally developed for drawing of block diagrams.</p>
	</description>
	<meta-selflink><extension-href name="blockdraw_wfo" /></meta-selflink>
	<base href=<!--#expand-next-string-->"$(BASE)" />
	<examples-home href=<!--#expand-next-string-->"$(EXAMPLES)" />
	<up-link><a part="extensions">All extensions</a></up-link>
	<needs>
		<a extension="shiftoff" />
		<a extension="centering" />
		<a extension="circle" />
		<a extension="arrowheads" />
	</needs>
	<top>
		<alphabetical-index/>
<example-with-output title="Block diagram example" internal-id="blockdraw/intro">
<image pdf="showcase/blockdrawdemo_3.pdf" jpg="showcase/blockdrawdemo_70%.jpg" />
<source file="showcase/blockdrawdemo.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)showcase/blockdrawdemo.shape" -->]]>
</source>
<caption>
	<p>An application of the <a extension="blockdraw_wfo" /> extension.  This example contains some non-standard solutions, showing how the functions of this extension can be combined with standard <str-Shapes /> operations.</p>
</caption>
</example-with-output>
		<p>The name of this extension includes the mysterious <em>wfo</em>.  It stands for <em>waiting for objects</em>, and refers to the wish to deal with elements of block diagrams using objects of user-defined types rather than just relying on <named-type name="Drawable" />.  However, by relying on <named-type name="Drawable" /> as the representation, this extension is much more generally useful than it would otherwise be.</p>
	</top>

	<section id="extensions/blockdraw_wfo/tutorial">
		<title>Tutorial</title>
		<body>
			<p>Before going into the detailed description of the bindings introduced by this extension, this tutorial will serve as a quick start for them who just want to see what the source code for some examples could look like.  This tutorial is really not much more than that; a sequence of increasingly complex examples.</p>

<example-with-output title="Hello world!" internal-id="blockdraw/tutorial/hello">
<image pdf="doc/blockdraw-tutorial-hello_3.pdf" jpg="doc/blockdraw-tutorial-hello_70%.jpg" />
<source file="doc/blockdraw-tutorial-hello.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-tutorial-hello.shape" -->]]>
</source>
<caption>
	<p>The simplest of all examples.  This is simply a label placed in a rectangular block of standard size.  Have a look at the source code right away!</p>
</caption>
</example-with-output>

<example-with-output title="Relative placement" internal-id="blockdraw/tutorial/relative">
<image pdf="doc/blockdraw-tutorial-relative_3.pdf" jpg="doc/blockdraw-tutorial-relative_70%.jpg" />
<source file="doc/blockdraw-tutorial-relative.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-tutorial-relative.shape" -->]]>
</source>
<caption>
	<p>Several functions are provided to put a block at a predefined distance apart from a given block.  They are non-pure functions that both add the positioned object to a destination state and return it so that it can be used for future reference.  See <a id="extensions/blockdraw_wfo/layout" ><title /></a> for a complete list of layout functions.</p>
	<p>The reason why <binding extension="blockdraw_wfo" name="sumpicture" /> is a function rather than a <named-type name="Drawable" /> is that the result is a function of the dynamic environment; both the radius size of the block, the width of the line, and the size of the summation sign, depend on dynamic bindings.</p>
</caption>
</example-with-output>

<example-with-output title="Connection points" internal-id="blockdraw/tutorial/con-points">
<image pdf="doc/blockdraw-tutorial-conpoint_3.pdf" jpg="doc/blockdraw-tutorial-conpoint_70%.jpg" />
<source file="doc/blockdraw-tutorial-conpoint.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-tutorial-conpoint.shape" -->]]>
</source>
<caption>
	<p>A connection point function is used to find an appropriate connection point of a block with two inputs.  Exactly how this point is pointed out using a connection arrow from nowhere is not important here.</p>
</caption>
</example-with-output>

<example-with-output title="Connections and labels" internal-id="blockdraw/tutorial/labels">
<image pdf="doc/blockdraw-tutorial-labels_3.pdf" jpg="doc/blockdraw-tutorial-labels_70%.jpg" />
<source file="doc/blockdraw-tutorial-labels.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-tutorial-labels.shape" -->]]>
</source>
<caption>
	<p>Depending on the relative layout of blocks, a varying degree of manual effort is needed to get the connecting paths right.  In this example, all paths but the feed-back path can be deduced automatically using <binding extension="blockdraw_wfo" name="connect" />.  The constructed path is both painted and returned.  Most of the time the return value is ignored (by means of <binding name="ignore" />), but it is useful when we want to place a label along the path.  See <a id="extensions/blockdraw_wfo/connections" /> for the complete set of functions for the purpose of making connections.</p>
	<p>Putting a label along the connection is easy.  To make the source code readable, it is a good idea to bind the connection path to a variable, and then use this variable when placing the label.  Special purpose functions are provided to ensure a consistent layout of labels; the user need only select a point on the path (preferably using <binding extension="centering" name="mspoint" />) and a side of that point (by using the “<inline>putlabel</inline>-function” named accordingly), and how the label should be aligned.</p>
	<p>Putting a label at a terminal point is similar to labeling a connection, the only difference is how the point to be labeled is selected.  Note that for a <binding name="pointpicture" />, all connection point functions will return the same point.</p>
	<p>This example also shows how to place signs at connection points, and how to indicate a point where a signal splits by a small dot.</p>
	<p>This is a comparatively simple figure, containing three different kinds of objects: blocks, connections and annotations along the connections.  This example also follows the good habit to let preferences that might be shared by several figures be extracted into a separate file (<a href=<!--#expand-next-string-->"$(BASE)$(EXAMPLES)doc/blockdraw-tutorial-tut-prefs.shext">link</a>).</p>
</caption>
</example-with-output>

<example-with-output title="More layout" internal-id="blockdraw/tutorial/layout">
<image pdf="doc/blockdraw-tutorial-layout_3.pdf" jpg="doc/blockdraw-tutorial-layout_70%.jpg" />
<source file="doc/blockdraw-tutorial-layout.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-tutorial-layout.shape" -->]]>
</source>
<caption>
	<p>Laying out the blocks of a slightly more complicated diagram, and constructing a nice path to be dashed.</p>
	<p>The art of making nice block diagrams using this extension turns out to be a matter of having an idea for how to select from the predefined distances.  Here are a few guidelines from the author:</p>
	<ul>
		<li><p>Use <em>Far</em> between terminals and the closest <em>block</em> they connect to.</p></li>
		<li><p>Use <em>VeryNear</em> between a block and a split point on its output.</p></li>
		<li><p>Use <em>Near</em> between horizontally aligned blocks when there shall be <em>no</em> label on the connection.</p></li>
		<li><p>Use <em>Far</em> between horizontally aligned blocks when there <em>shall be</em> a label on the connection.</p></li>
		<li><p>Use <em>Near</em> between vertically aligned blocks.</p></li>
	</ul>
	<p>Note how the dashed line was handled similarly to a label when selecting the distance after the middle summation.</p>
	<p>There are many situations when simple guidelines like the ones above cannot be applied successfully, and one will have to improvise.  For example, the shorter distances may be preferred if the graphics becomes too wide, although an alternative solution to this is to change the values of the predefined lengths instead, see <a id="extensions/blockdraw_wfo/settings" />.</p>
</caption>
</example-with-output>

<p>OK, this is the end of the tutorial.  Hopefully you didn't find the examples too difficult to follow —  did you even get interested to learn more about the range of functions provided?</p>
		</body>
	</section>

	<section id="extensions/blockdraw_wfo/settings">
		<title>Settings</title>
		<top>
			<p>This extension introduces a large number of dynamic variables to control various aspects of the appearance.  The variables fall naturally into different categories, and are presented accordingly below.</p>
		</top>
		<section id="extensions/blockdraw_wfo/settings/blocksize">
			<title>Block size</title>
			<body>
				<dynamic-variable-table>
					<dynamic-variable identifier="longblockrx">
						<default><physical><scalar>0.7</scalar><unit>cm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>Half the width of a long block.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="longblockry">
						<default><physical><scalar>0.4</scalar><unit>cm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>Half the height of a long block.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="smallblockr">
						<default><physical><scalar>0.3</scalar><unit>cm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>Half the side length a small square block, and also the radius of round blocks.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="fracblockry">
						<default><physical><scalar>0</scalar><unit>cm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>Half the height of blocks which are meant to have enough vertical space for a standing fraction in the label.</p>
						</description>
					</dynamic-variable>
				</dynamic-variable-table>
			</body>
		</section>

		<section id="extensions/blockdraw_wfo/settings/linewidth">
			<title>Line widths</title>
			<body>
				<dynamic-variable-table>
					<dynamic-variable identifier="connectionlw">
						<default><physical><scalar>0.8</scalar><unit>bp</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>The line width for connections.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="blocklw">
						<default><physical><scalar>0.8</scalar><unit>bp</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>The line width for the border of blocks.</p>
						</description>
					</dynamic-variable>
				</dynamic-variable-table>
			</body>
		</section>

		<section id="extensions/blockdraw_wfo/settings/margins">
			<title>Margins</title>
			<body>
				<dynamic-variable-table>
					<dynamic-variable identifier="abovelabelmargin">
						<default><physical><scalar>1.5</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>The margin to use when labels are placed above an object.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="belowlabelmargin">
						<default><physical><scalar>1.5</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>The margin to use when labels are placed below an object.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="leftrightlabelmargin">
						<default><physical><scalar>1</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>The margin to use when labels are placed to the left or to the right of an object.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="signmarginslide">
						<default><physical><scalar>1.5</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>The margin for signs, in the direction of the connecting path.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="signmarginoffset">
						<default><physical><scalar>2</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>The margin for signs, in the direction away from the connecting path.</p>
						</description>
					</dynamic-variable>
				</dynamic-variable-table>
			</body>
		</section>

		<section id="extensions/blockdraw_wfo/settings/blockspace">
			<title>Space between blocks</title>
			<body>
				<dynamic-variable-table>
					<dynamic-variable identifier="blockspaceverynear">
						<default><physical><scalar>3</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>A very small distance.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="blockspacenear">
						<default><physical><scalar>6</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>A rather small distance.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="blockspacelabelspace">
						<default><physical><scalar>8</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>A distance that may be used when there should be enough space for a small label between the blocks.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="blockspacefar">
						<default><physical><scalar>10</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>A rather big distance.</p>
						</description>
					</dynamic-variable>
					<dynamic-variable identifier="blockspaceveryfar">
						<default><physical><scalar>15</scalar><unit>mm</unit></physical></default>
						<type><named-type name="Length" /></type>
						<description>
							<p>A very big distance.</p>
						</description>
					</dynamic-variable>
				</dynamic-variable-table>
			</body>
		</section>

		<section id="extensions/blockdraw_wfo/settings/misc">
			<title>Miscellaneous</title>
			<body>
				<dynamic-variable identifier="textscaling">
					<default><inline>[scale 1]</inline></default>
					<type>
						<function-type>
							<arguments>
								<arg><type><named-type name="Drawable" /></type></arg>
							</arguments>
							<result>
								<named-type name="Drawable" />
							</result>
						</function-type>
					</type>
					<description>
						<p>Transform that is applied to anything which is thought to be a label.  Useful to scale down labels to allow smaller diagrams.</p>
						<p>An alternative could be to produce big diagrams, and then scale the result at the end, but this is a mess compared to always producing graphics in the true scale.</p>
					</description>
				</dynamic-variable>

				<dynamic-variable identifier="connectpainter">
					<default><inline>[stroke head:MetaPostArrow ...]</inline></default>
					<type>
						<function-type>
							<arguments>
								<arg><type><named-type name="Path" /></type></arg>
							</arguments>
							<result>
								<named-type name="Drawable" />
							</result>
						</function-type>
					</type>
					<description>
						<p>The function used to paint connections.</p>
						<p>When called from within this extension, <dynvar name="width" /> will always be set to <dynvar extension="blockdraw_wfo" name="connectionlw" />.  Hence, users who call <dynvar extension="blockdraw_wfo" name="connectpainter" /> directly should consider using this line width as well.</p>
					</description>
				</dynamic-variable>
			</body>
		</section>

	</section>

	<section id="extensions/blockdraw_wfo/blocks">
		<title>Blocks</title>
		<body>
			<p>These functions return plain <named-type name="Drawable" /> objects — they are dumb in this sense.  A more accurate way of modelling things would at least include information about connection points with each block, while we <em>compute</em> connection points assuming that the blocks are rectangular, see <a id="extensions/blockdraw_wfo/con-points" />.</p>

<example-with-output title="Blocks" internal-id="blockdraw/blocks/intro">
<image pdf="doc/blockdraw-blocks_3.pdf" jpg="doc/blockdraw-blocks_70%.jpg" />
<source file="doc/blockdraw-blocks.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-blocks.shape" -->]]>
</source>
<caption>
	<p>The range of predefined blocks for use in block diagrams.</p>
</caption>
</example-with-output>

			<system-binding identifier="sizedblock">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="rx">
								<type><named-type name="Length" /></type>
							</arg>
							<arg identifier="ry">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="textscaling" /> <dynvar extension="blockdraw_wfo" name="blocklw" /></dynamic-references>
						<description>
							<p>This function is considered low-level and should not be used directly in standard applications.</p>
							<p>Constructs a rectangular block, with a label positioned nicely inside.</p>
						</description>
						<see-also>
							<binding extension="blockdraw_wfo" name="longblock" />
							<binding extension="blockdraw_wfo" name="squareblock" />
							<binding extension="blockdraw_wfo" name="fracblock" />
							<binding extension="blockdraw_wfo" name="longenoughblock" />
							<binding extension="blockdraw_wfo" name="longenoughfracblock" />
						</see-also>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="longblock">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="longblockrx" /> <dynvar extension="blockdraw_wfo" name="longblockry" /></dynamic-references>
						<description>
							<p>Constructs a long rectangular block of standardized size.</p>
							<p>Calls <binding extension="blockdraw_wfo" name="sizedblock" /> internally, which uses additional dynamic variables.</p>
						</description>
						<see-also>
							<binding extension="blockdraw_wfo" name="sizedblock" />
						</see-also>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="squareblock">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="smallblockr" /></dynamic-references>
						<description>
							<p>Constructs a small square block of standardized size.</p>
							<p>Calls <binding extension="blockdraw_wfo" name="sizedblock" /> internally, which uses additional dynamic variables.</p>
						</description>
						<see-also>
							<binding extension="blockdraw_wfo" name="sizedblock" />
						</see-also>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="fracblock">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="longblockrx" /> <dynvar extension="blockdraw_wfo" name="fracblockry" /></dynamic-references>
						<description>
							<p>Constructs a long rectangular block of standardized size, tall enough to accommodate a standing fraction in the label.</p>
							<p>Calls <binding extension="blockdraw_wfo" name="sizedblock" /> internally, which uses additional dynamic variables.</p>
						</description>
						<see-also>
							<binding extension="blockdraw_wfo" name="sizedblock" />
						</see-also>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="longenoughblock">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="longblockrx" /> <dynvar extension="blockdraw_wfo" name="longblockry" /></dynamic-references>
						<description>
							<p>Like <binding extension="blockdraw_wfo" name="longblock" />, but makes the block wider if required to accommodate the label.</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="longenoughfracblock">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="longblockrx" /> <dynvar extension="blockdraw_wfo" name="fracblockry" /></dynamic-references>
						<description>
							<p>Like <binding extension="blockdraw_wfo" name="fracblock" />, but makes the block wider if required to accommodate the label.</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="roundblock">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="textscaling" /> <dynvar extension="blockdraw_wfo" name="smallblockr" /> <dynvar extension="blockdraw_wfo" name="blocklw" /></dynamic-references>
						<description>
							<p>Constructs a small circular block of standardized size.</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="sumpicture">
				<function>
					<case>
						<arguments>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<description>
							<p>Returns a small circular summation block.  Note that this must be a function since the result shall depend on dynamic bindings!</p>
							<p>Calls <binding extension="blockdraw_wfo" name="roundblock" /> internally, which uses additional dynamic variables.</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="splitdot">
				<function>
					<case>
						<arguments>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar name="stroking" /> <dynvar extension="blockdraw_wfo" name="connectionlw" /></dynamic-references>
						<description>
							<p>Returns a small circular dot to use where a signal splits.  The size is chosen relative to the width of the connection strokes.  Note that this must be a function since the result shall depend on dynamic bindings!</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="termcircle">
				<function>
					<case>
						<arguments>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /></dynamic-references>
						<description>
							<p>Returns a small circle that can be used if a signal terminal is to be emphasized.  The size is chosen relative to the width of the connection strokes.  Note that this must be a function since the result shall depend on dynamic bindings!</p>
						</description>
					</case>
				</function>
			</system-binding>

		</body>
	</section>

	<section id="extensions/blockdraw_wfo/layout">
		<title>Layout</title>
		<body>
			<p>The functions are non-pure, as they have the bad (?) habit of tacking on their return value to a <named-state-type name="Group" />.  The reason is that it is almost always convenient to bind a block to a variable so that it can be referred to, and there is seldom reason not to draw it as soon as it is laid out.  If one does not want the object to be drawn to any state, one may simply pass <state-binding name="ignore" /> as the destination.</p>
			<p>The number of functions in this section may seem overwhelming, but the reason for this is to hide degrees of freedom in order to gain in consistency of the spacing between blocks in the diagram.  Except <binding extension="blockdraw_wfo" name="putblockOrigin" />, uses typically select among function being named after two axes for the user to choose from; one distance axis (<em>VeryNear</em>, <em>Near</em>, <em>LabelSpace</em>, <em>Far</em>, <em>VeryFar</em>), and one direction axis (<em>Left</em>, <em>Right</em>, <em>Below</em>, <em>Above</em>).  This explains 20 of the functions here.  In addition, there are some low-level functions, and another four where the point on the distance axis is <em>LabelMargin</em> (here, the distance depends on the direction, but users typically don't use these functions anyway).</p>

<example-with-output title="Layout" internal-id="blockdraw/layout/intro">
<image pdf="doc/blockdraw-layout_3.pdf" jpg="doc/blockdraw-layout_70%.jpg" />
<source file="doc/blockdraw-layout.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-layout.shape" -->]]>
</source>
<caption>
	<p>A selection of the layout functions.  The name of the functions reflect which dynamic variable is used to determine the distance between the objects, in the direction also given by the name of the function.  Note that all these functions are non-pure, as they allow the object being laid out to be added to a destination variable in addition to returning it.</p>
	<p>Note that horizontal positioning does not care about the object's vertical extent, and vice versa.  This is not only apparent in the example with the block labeled “High”, but also in the examples where the new block is a plain label centered at its leftmost baseline point.</p>
	<p>The function <binding extension="blockdraw_wfo" name="putblockOrigin" /> is different from the others in that it puts the block at the origin instead of relative to another block.</p>
	<p>The functions using the various label margins should only be used if this non-pure behavior is desired; labels are generally better placed using the pure functions described in <a id="extensions/blockdraw_wfo/labels" />.</p>
</caption>
</example-with-output>

			<system-binding identifier="putblockOrigin">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<description>
							<p>Simply tacks <arg name="newBlock" /> to <state-arg name="dst" />, and then returns <arg name="newBlock" />.  This function is typically used to place the first block added to the block diagram, but may also be used in other situations when manual tweaking is required to get a block in the right location.  In the latter case, this function is called with an object which has already been shifted to the right location; applying the shift to the result of calling this function would be meaningless, since the un-shifted object would already have been added to <state-arg name="dst" /> then.</p>
							<p>Although this is a very simple task, use of this function makes the code more homogeneous.</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="putblockLeft">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="dist">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<description>
							<p>This function is considered low-level; the user should prefer functions which call this function with standardized values for <arg name="dist" /> instead.</p>
							<p>Positions <arg name="newBlock" /> to the left of <arg name="oldBlock" />, such that the horizontal distance between the bounding boxes equals <arg name="dist" />.  The vertical positioning will make the origin of <arg name="newBlock" /> level with the vertical midpoint of <arg name="oldBlock" />'s bounding box.</p>
						</description>
						<see-also>
							<binding extension="blockdraw_wfo" name="putblockVeryNearLeft" />
							<binding extension="blockdraw_wfo" name="putblockNearLeft" />
							<binding extension="blockdraw_wfo" name="putblockLabelSpaceLeft" />
							<binding extension="blockdraw_wfo" name="putblockFarLeft" />
							<binding extension="blockdraw_wfo" name="putblockVeryFarLeft" />
							<binding extension="blockdraw_wfo" name="putblockLabelMarginLeft" />
						</see-also>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="putblockRight">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="dist">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="putblockLeft" /></p>
						</description>
						<see-also>
							<binding extension="blockdraw_wfo" name="putblockVeryNearRight" />
							<binding extension="blockdraw_wfo" name="putblockNearRight" />
							<binding extension="blockdraw_wfo" name="putblockLabelSpaceRight" />
							<binding extension="blockdraw_wfo" name="putblockFarRight" />
							<binding extension="blockdraw_wfo" name="putblockVeryFarRight" />
							<binding extension="blockdraw_wfo" name="putblockLabelMarginRight" />
						</see-also>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="putblockAbove">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="dist">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="putblockLeft" /></p>
						</description>
						<see-also>
							<binding extension="blockdraw_wfo" name="putblockVeryNearAbove" />
							<binding extension="blockdraw_wfo" name="putblockNearAbove" />
							<binding extension="blockdraw_wfo" name="putblockLabelSpaceAbove" />
							<binding extension="blockdraw_wfo" name="putblockFarAbove" />
							<binding extension="blockdraw_wfo" name="putblockVeryFarAbove" />
							<binding extension="blockdraw_wfo" name="putblockLabelMarginAbove" />
						</see-also>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="putblockBelow">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="dist">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="putblockLeft" /></p>
						</description>
						<see-also>
							<binding extension="blockdraw_wfo" name="putblockVeryNearBelow" />
							<binding extension="blockdraw_wfo" name="putblockNearBelow" />
							<binding extension="blockdraw_wfo" name="putblockLabelSpaceBelow" />
							<binding extension="blockdraw_wfo" name="putblockFarBelow" />
							<binding extension="blockdraw_wfo" name="putblockVeryFarBelow" />
							<binding extension="blockdraw_wfo" name="putblockLabelMarginBelow" />
						</see-also>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="putblockVeryNearLeft">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspaceverynear" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockLeft" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockNearLeft">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacenear" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockLeft" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockLabelSpaceLeft">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacelabelspace" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockLeft" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockFarLeft">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacefar" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockLeft" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockVeryFarLeft">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspaceveryfar" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockLeft" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockLabelMarginLeft">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="leftrightlabelmargin" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockLeft" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="putblockVeryNearRight">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspaceverynear" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockRight" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockNearRight">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacenear" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockRight" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockLabelSpaceRight">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacelabelspace" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockRight" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockFarRight">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacefar" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockRight" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockVeryFarRight">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspaceveryfar" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockRight" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockLabelMarginRight">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="leftrightlabelmargin" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockRight" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="putblockVeryNearBelow">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspaceverynear" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockBelow" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockNearBelow">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacenear" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockBelow" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockLabelSpaceBelow">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacelabelspace" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockBelow" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockFarBelow">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacefar" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockBelow" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockVeryFarBelow">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspaceveryfar" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockBelow" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockLabelMarginBelow">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="belowlabelmargin" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockBelow" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>

			<system-binding identifier="putblockVeryNearAbove">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspaceverynear" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockAbove" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockNearAbove">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacenear" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockAbove" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockLabelSpaceAbove">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacelabelspace" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockAbove" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockFarAbove">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspacefar" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockAbove" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockVeryFarAbove">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="blockspaceveryfar" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockAbove" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putblockLabelMarginAbove">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Group" /></type>
							</state>
							<arg identifier="newBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="oldBlock">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="abovelabelmargin" /></dynamic-references>
						<description>
							<p>Calls <binding extension="blockdraw_wfo" name="putblockAbove" /> with the distance argument given by the dynamic variable corresponding to the name of this function.</p>
						</description>
					</case>
				</function>
			</system-binding>

		</body>
	</section>

	<section id="extensions/blockdraw_wfo/con-points">
		<title>Connection points</title>
		<body>
			<p>A basic design choice of this extension is to use a plain <named-type name="Drawable" /> object to model a block.  Hence, the points where connections attach to a block is not part of the object representation itself.  Instead, a standardized way of selecting points on the bounding box is provided.</p>
			<p>A connection point is specified by selecting one of the four sides of a block (by calling the appropriate function), the total number of connection points on that side, and the index of the current point.  Thanks to the use of default values, it is often sufficient to only select the side of the block; then the mid-point of that side will be selected.</p>

<example-with-output title="Connection points" internal-id="blockdraw/con-points/intro">
<image pdf="doc/blockdraw-con-points_3.pdf" jpg="doc/blockdraw-con-points_70%.jpg" />
<source file="doc/blockdraw-con-points.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-con-points.shape" -->]]>
</source>
<caption>
	<p>How to select points on a block where connections attach.  Note that it is assumed that the block is rectangular, so that the rectangular bounding box follows the contour of the object; this is why summation blocks can only be used with one connection on each side.  Also note that the provided numbers shall be floats, nor is the index required to be in the range from 1 to the total number of points, but use these freedoms with caution!</p>
</caption>
</example-with-output>

			<system-binding identifier="leftpoint">
				<function>
					<case>
						<arguments>
							<state identifier="pic">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="n">
								<type><named-type name="Float" /></type>
								<default><eq>1</eq></default>
							</arg>
							<arg identifier="i">
								<type><named-type name="Float" /></type>
								<default><eq>1</eq></default>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Coords" /></type>
						</result>
						<description>
							<p>Select a point on the left side of the rectangular bounding box of <arg name="pic" />, selecting point number <arg name="i" /> among a total of <arg name="n" /> on this side.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="rightpoint">
				<function>
					<case>
						<arguments>
							<state identifier="pic">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="n">
								<type><named-type name="Float" /></type>
								<default><eq>1</eq></default>
							</arg>
							<arg identifier="i">
								<type><named-type name="Float" /></type>
								<default><eq>1</eq></default>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Coords" /></type>
						</result>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="leftpoint" />.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="bottompoint">
				<function>
					<case>
						<arguments>
							<state identifier="pic">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="n">
								<type><named-type name="Float" /></type>
								<default><eq>1</eq></default>
							</arg>
							<arg identifier="i">
								<type><named-type name="Float" /></type>
								<default><eq>1</eq></default>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Coords" /></type>
						</result>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="leftpoint" />.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="toppoint">
				<function>
					<case>
						<arguments>
							<state identifier="pic">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="n">
								<type><named-type name="Float" /></type>
								<default><eq>1</eq></default>
							</arg>
							<arg identifier="i">
								<type><named-type name="Float" /></type>
								<default><eq>1</eq></default>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Coords" /></type>
						</result>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="leftpoint" />.</p>
						</description>
					</case>
				</function>
			</system-binding>

		</body>
	</section>

	<section id="extensions/blockdraw_wfo/connections">
		<title>Connections</title>
		<body>
			<p>These functions are, for the same reason as the layout functions (see <a id="extensions/blockdraw_wfo/layout" />), non-pure.  One difference, though, is that instead of returning the <em>painted</em> path, only the <named-type name="Path" /> object itself is returned.  The reason is that the path is much more useful for further operations, such as putting labels along it.</p>
			<p>While the most high-level functions take entire blocks as arguments and assume that there is just one connection point on each side of a block, the more low-level functions take the connection points as arguments, allowing the user to select the point using the functions in <a id="extensions/blockdraw_wfo/con-points" />.</p>
			<p>In most situations, <binding extension="blockdraw_wfo" name="connect" /> is able to figure out the path from the blocks being connected alone, and in these cases this function should be used.  In most cases when <binding extension="blockdraw_wfo" name="connect" /> picks the wrong path, this is because it makes the connection to the wrong sides of the blocks, and then functions such as <binding extension="blockdraw_wfo" name="brconnect" /> (connect the <em>bottom</em> side of the first block with the <em>right</em> of the second block) come in handy.  These functions will still be insufficient if the path shall connect, say, a bottom side to another bottom side, since they cannot figure out the vertical coordinate for the horizontal part of such a path.  Then the most low-level functions, such as <binding extension="blockdraw_wfo" name="vvconnect" /> (construct a path with is initially <em>vertical</em> and <em>vertical</em> at the end as well), are required.  It is only the most low-level functions that operate on points rather than blocks.</p>
			<p>So, there were three levels of functions, and they are presented in order low to high.  The listing of the functions on each level is preceded by an example..</p>

<example-with-output title="Connection primitives" internal-id="blockdraw/connections/primitives">
<image pdf="doc/blockdraw-connections-primitive_3.pdf" jpg="doc/blockdraw-connections-primitive_70%.jpg" />
<source file="doc/blockdraw-connections-primitive.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-connections-primitive.shape" -->]]>
</source>
<caption>
	<p>These are the primitive functions that construct connection paths.  They operate on points, and are named after the direction at the beginning and end of the constructed path, for instance <binding extension="blockdraw_wfo" name="hvconnect" /> constructs a path that is <em>horizontal</em> at the beginning and <em>vertical</em> at the end.  If the path shall begin and end along the same axis, the user must also tell at which coordinate the beginning and end shall connect with each other.  This is done using a pair of mediation and slide values; the mediation is a linear interpolation between the start (mediation is <eq>0</eq>) and end (mediation is <eq>1</eq>) points, and the slide is an absolute length added to the coordinate given by the slide.</p>
</caption>
</example-with-output>
			<system-binding identifier="vhconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pa">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="pb">
								<type><named-type name="Coords" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Constructs a path from <arg name="pa" /> to <arg name="pb" /> which consists of two line segments; first a <em>vertical</em> and then a <em>horizontal</em>.  Besides returning the path, it is painted using <dynvar extension="blockdraw_wfo" name="connectpainter" /> with <dynvar name="width" /> being set to <dynvar extension="blockdraw_wfo" name="connectionlw" />, and the resulting <named-type name="Drawable" /> is added to <state-arg name="dst" />.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="vhconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pa">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="pb">
								<type><named-type name="Coords" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="hvconnect" />; just exchange <em>horizontal</em> and <em>vertical</em> in the description.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="hhconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pa">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="pb">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="mediation">
								<type><named-type name="Float" /></type>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Constructs a path from <arg name="pa" /> to <arg name="pb" /> which consists of three line segments; initially <em>horizontal</em> and <em>horizontal</em> also at the end.  The horizontal coordinate of the vertical line segment in the middle is given by the <arg name="mediation" /> and <arg name="slide" /> values.  The mediation is relative to the horizontal coordinates of <arg name="pa" /> and <arg name="pb" />, while the slide enters the coordinate as a term.  See the example for illustration!</p>
							<p>Besides returning the path, it is also painted to <state-arg name="dst" />, just like <binding extension="blockdraw_wfo" name="vhconnect" /> does.</p>
						</description>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="vvconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pa">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="pb">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="mediation">
								<type><named-type name="Float" /></type>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="hhconnect" />; just exchange <em>horizontal</em> and <em>vertical</em> in the description.</p>
						</description>
					</case>
				</function>
			</system-binding>


<example-with-output title="Connection intermediate level functions" internal-id="blockdraw/connections/intermediate">
<image pdf="doc/blockdraw-connections-intermediate_3.pdf" jpg="doc/blockdraw-connections-intermediate_70%.jpg" />
<source file="doc/blockdraw-connections-intermediate.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-connections-intermediate.shape" -->]]>
</source>
<caption>
	<p>These are the intermediate level functions that construct connection paths.  They operate on blocks, and are named after the blocks' sides at the beginning and end of the constructed path, for instance <binding extension="blockdraw_wfo" name="rbconnect" /> constructs a path from the <em>right</em> side of the first block to the  <em>bottom</em> side of the second block.  If the path shall connect to the same side of the two blocks, the user must also tell how far from the closest block the path shall turn.</p>
	<p>When the underlying primitive function being used is <binding extension="blockdraw_wfo" name="vvconnect" /> or <binding extension="blockdraw_wfo" name="hhconnect" /> the mediation parameter is <eq>0.5</eq> and the slide zero.</p>
</caption>
</example-with-output>
			<system-binding identifier="trconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Calls the appropriate low-level function to create a path from the <em>top</em> of the first block to the <em>right</em> side of the second block.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="vhconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="tlconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="trconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="vhconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="brconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="trconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="vhconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="blconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="trconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="vhconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="ltconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="trconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="hvconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="lbconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="trconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="hvconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="rtconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="trconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="hvconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="rbconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="trconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="hvconnect" />
					</see-also>
				</function>
			</system-binding>

			<system-binding identifier="tbconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="mediation">
								<type><named-type name="Float" /></type>
								<default><eq>0.5</eq></default>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
								<default><physical><scalar>0</scalar><unit>cm</unit></physical></default>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Calls the appropriate low-level function to construct a path from the <em>top</em> of the first block to the <em>bottom</em> of the second block.  The <arg name="mediation" /> and <arg name="slide" /> values are simply passed on to the low-level function.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="vvconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="tbconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="mediation">
								<type><named-type name="Float" /></type>
								<default><eq>0.5</eq></default>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
								<default><physical><scalar>0</scalar><unit>cm</unit></physical></default>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="tbconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="vvconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="lrconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="mediation">
								<type><named-type name="Float" /></type>
								<default><eq>0.5</eq></default>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
								<default><physical><scalar>0</scalar><unit>cm</unit></physical></default>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="tbconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="hhconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="rlconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="mediation">
								<type><named-type name="Float" /></type>
								<default><eq>0.5</eq></default>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
								<default><physical><scalar>0</scalar><unit>cm</unit></physical></default>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="tbconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="hhconnect" />
					</see-also>
				</function>
			</system-binding>

			<system-binding identifier="ttconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Calls the appropriate low-level function to construct a path from the <em>top</em> of the first block to the <em>top</em> of the second block.  The <arg name="slide" /> value is simply passed on to the low-level function, and the mediation value is chosen as the reasonable choice of <eq>0</eq> or <eq>1</eq>.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="vvconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="bbconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="ttconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="vvconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="llconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="ttconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="hhconnect" />
					</see-also>
				</function>
			</system-binding>
			<system-binding identifier="rrconnect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="slide">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="ttconnect" />.</p>
						</description>
					</case>
					<see-also>
						<binding extension="blockdraw_wfo" name="hhconnect" />
					</see-also>
				</function>
			</system-binding>

<example-with-output title="Connection by automatic choice" internal-id="blockdraw/connections/connect" id="blockdraw/connections/connect-example">
<image pdf="doc/blockdraw-connections-connect_3.pdf" jpg="doc/blockdraw-connections-connect_70%.jpg" />
<source file="doc/blockdraw-connections-connect.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-connections-connect.shape" -->]]>
</source>
<caption>
	<p>The function <binding extension="blockdraw_wfo" name="connect" /> makes an automatic selection among the intermediate level functions.  Note that the first block's left and right sides are preferred to its bottom and top sides, and that one never obtains a path which connects to the same side of both blocks.  Hence, only eight of the intermediate level functions are accessed through <binding extension="blockdraw_wfo" name="connect" />.</p>
</caption>
</example-with-output>

			<system-binding identifier="connect">
				<function>
					<case>
						<arguments>
							<state identifier="dst">
								<type><named-state-type name="Drawable" /></type>
							</state>
							<arg identifier="pica">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="picb">
								<type><named-type name="Drawable" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Path" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="connectionlw" /> <dynvar extension="blockdraw_wfo" name="connectpainter" /></dynamic-references>
						<description>
							<p>Makes an automatic selection among the intermediate level connection functions.  See <a id="blockdraw/connections/connect-example" />.</p>
						</description>
					</case>
				</function>
			</system-binding>

		</body>
	</section>

	<section id="extensions/blockdraw_wfo/labels">
		<title>Labels</title>
		<body>
<example-with-output title="Layout of labels" internal-id="blockdraw/labels/intro">
<image pdf="doc/blockdraw-labels_3.pdf" jpg="doc/blockdraw-labels_70%.jpg" />
<source file="doc/blockdraw-labels.shape">
<![CDATA[<!--#include depth="0" virtual="$(BUILDDIR)$(EXAMPLES)doc/blockdraw-labels.shape" -->]]>
</source>
<caption>
	<p>Functions used to position labels relative to a given point.  That these functions do take the point to be labeled as an argument counteracts separation of concerns, which would require that these function only position labels relative to the origin.  However, it is very convenient to incorporate the shift in the functions, and in case one doesn't want the shift, one may always pass the origin.</p>
	<p>Or make a new design where the point defaults to the origin…</p>
	<p>Note how the vertical positioning is independent of the vertical extent of the label.  This ensures that labels with different vertical extent still end up on the same baseline if the points they label are level.</p>
</caption>
</example-with-output>

			<system-binding identifier="putlabelLeft">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="z">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="y">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="leftrightlabelmargin" /></dynamic-references>
						<description>
							<p>Position <arg name="lbl" /> to the left of <arg name="z" />, centering vertically at <arg name="y" />.  For instance, <arg name="y" /><eq>=1</eq> gives a label below <arg name="z" />, while <eq>-1</eq> gives a label above.</p>
						</description>
						<see-also>
							<binding extension="centering" name="centeryatX" />
						</see-also>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putlabelRight">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="z">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="y">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="leftrightlabelmargin" /></dynamic-references>
						<description>
							<p>Analogous to <binding extension="blockdraw_wfo" name="putlabelLeft" />.</p>
						</description>
						<see-also>
							<binding extension="centering" name="centeryatX" />
						</see-also>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putlabelBelow">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="z">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="x">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="belowlabelmargin" /></dynamic-references>
						<description>
							<p>Position <arg name="lbl" /> below <arg name="z" />, treating the label as if it had the height of an <eq>X</eq>, centering horizontally at <arg name="x" />.  For instance, <arg name="x" /><eq>=1</eq> gives a label to the left of <arg name="z" />, while <eq>-1</eq> gives a label to the right.</p>
						</description>
						<see-also>
							<binding extension="centering" name="centeryatX" />
						</see-also>
					</case>
				</function>
			</system-binding>
			<system-binding identifier="putlabelAbove">
				<function>
					<case>
						<arguments>
							<arg identifier="lbl">
								<type><named-type name="Drawable" /></type>
							</arg>
							<arg identifier="z">
								<type><named-type name="Coords" /></type>
							</arg>
							<arg identifier="x">
								<type><named-type name="Length" /></type>
							</arg>
						</arguments>
						<result>
							<type><named-type name="Drawable" /></type>
						</result>
						<dynamic-references><dynvar extension="blockdraw_wfo" name="abovelabelmargin" /></dynamic-references>
						<description>
							<p>Position <arg name="lbl" /> above <arg name="z" />, centering horizontally at <arg name="x" />.  For instance, <arg name="x" /><eq>=1</eq> gives a label to the left of <arg name="z" />, while <eq>-1</eq> gives a label to the right.</p>
						</description>
					</case>
				</function>
			</system-binding>

		</body>
	</section>

</book>
