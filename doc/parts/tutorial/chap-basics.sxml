<section id="chap-basics">
<title>Basics</title>
<top>
<p>In this chapter, we'll quickly go through a couple of simple but important things about the <str-Shapes /> language.</p>
</top>

<section id="basics/LaTeX">
<title>Producing nice labels with LaTeX</title>
<body>
<p>The following example shows how to produce a label typeset using <str-LaTeX />:</p>
<pre>
&bullet;page &lt;&lt; (TeX <char-str-open />$\Xi^{2}$<char-str-close />)
</pre>
<p>Things worth noting:</p>
<ol>
<li>There is no function call here.  The expression delimited by parentheses is a special form indicated by the <operator name="TeX" /> keyword.</li>
<li>The string delimiters is a pair of one grave and once acute accent.  If you find these difficult to produce using your keyboard layout, there is an alternative syntax; the poor man's string combines straight double quote marks with a pair of parentheses, in this case <inline>("$\Xi^{2}$")</inline>.</li>
<li>The backslash character (\) is not an escape character.</li>
<li><str-LaTeX /> is also useful for including pictures via the <inline>includegraphics</inline> macro.</li>
</ol>
<note>
Generally, the string syntax is chosen carefully not to interfere with the use of <str-LaTeX />.  Hence, two characters rarely used in <str-LaTeX /> source code were selected to be used interchangeably as escape characters, namely the cent sign (¢) and the sun sign (¤).  However, characters such as newlines and tabs can be included literally in strings, so there is seldom an urge to produce the rather unusual escape characters.
</note>
<note>
<p>There is also a function that does the same job as the <operator name="TeX" /> special form, but there are good reasons for avoiding it.</p>
</note>
</body>
</section><!-- End of basics/LaTeX -->

<section id="basics/transforms">
<title>Moving things around</title>
<body>
<p>When putting strokes on the page, there is a natural way of controlling where the strokes appear by simply specifying the desired coordinates.  When using the <operator name="TeX" /> special form, however, the produced graphics always ends up at the origin.  We clearly need to be able to move things around… well, strictly speaking, we don't <em>move</em> things in <str-Shapes />, since the language is functional.  What we really do is create a new object which only differs from the original by a <em>transform</em>, see <named-type name="Transform" />.</p>
<p>In <str-Shapes /> each transform is represented as an object in itself, which can then be applied to objects of geometric nature.  For example, to create the transform that moves (<em>shifts</em>, see <binding name="shift" />) things <physical><scalar>2</scalar><unit>cm</unit></physical> to the right and <physical><scalar>3</scalar><unit>mm</unit></physical> down, we write (we also give a name to the transform, so that it can be referred to later):</p>
<pre>
T1: [shift (2cm,~3mm)]
</pre>
Note:
<ol>
<li>The sign of a negative number or length is written using the tilde (~) character.  Negative values can also be written using the usual dash (-) if enclosed withing parentheses, for instance, <inline>(2cm,(-3mm))</inline>.  The latter alternative is convenient when the source is produced by other programs.</li>
</ol>
<p>Another very common transformation is rotation (see <binding name="rotate" />):</p>
<pre>
T2: [rotate 25°]
</pre>
Note:
<ol>
<li>The angle argument is basically interpreted as radians, but angles may be entered in degrees if immediately followed by the degree sign (°).  In fact, <inline>25°</inline> is just a way of entering the number 25⋅π/180.  For the full syntax of floats, see <syntax name="float" />.</li>
</ol>
<p>The following program illustrates how the transforms can be applied:</p>
<pre>
lbl: (TeX `$x^{2} + y^{2}$´)
&bullet;page &lt;&lt; [T1 lbl] &lt;&lt; [T2 lbl] &lt;&lt; lbl
</pre>

<p>The complete example with output is given below.</p>
<example-with-output title="Transforms" internal-id="example/transforms">
<image pdf="tutorial-transforms_3.pdf" jpg="tutorial-transforms_y_big.jpg" />
<source file=<!--#expand-next-string-->"$(EXAMPLES)/doc/tutorial-transforms.shape">
<![CDATA[<!--#include virtual="$(EXAMPLES)/doc/tutorial-transforms.shape" -->]]>
</source>
<caption>
	<p>A label painted once in its original location, once after a rotation, and once after a shift.</p>
</caption>
</example-with-output>

<p>Transforms can be combined using the multiplication operator (<operator name="*" />).  Hence, the following two lines do the same thing:</p>
<pre>
&bullet;page &lt;&lt; [T2 [T1 lbl]]
&bullet;page &lt;&lt; [T2*T1 lbl]
</pre>
<p>It is almost allways the case that combining the operators is (sometimes much) more efficient than applying one transform after the other.</p>

<p>Well, that's about all we are going to say regarding transforms in this tutorial.  Befor ending, we'll just mention that there are other constructors beside the ones seen here, that (almost all) transforms can be inverted (see <binding name="inverse" />), and that transforms also exist in <str-3D /> (see <named-type name="Transform3D" />).</p>
</body>
</section><!-- End of basics/transforms -->

<section id="basics/paths">
<title>Constructing paths</title>
<body>
<p>Path construction is at the heart of the <str-Shapes /> language, and we shall cover only a small part of the powerful ways in which paths can be specified.  The main documentation on path construction is in the <a part="syntax" id="syntax/misc-expr/path-constr">syntax chapter</a>.</p>

<p>Basically, path construction is about entering coordinates in a convenient way.  The cubic splines (often referred to as <em>Bezier splines</em>) that <str-Shapes /> uses for paths (which is the obvious choice since this is was is supported by <str-PDF />) consist both of points <em>on</em> the path and interpolation points that control the shape of the path between the points that are on the path.  Basically each path segment between two points on the path have one interpolation point associated with the starting point, and one associated with the final point.  Each of the interpolation points may be omitted, which corresponds to the limiting case when the interpolation point approaches the associated point on the path.  The following example tries to illustrate the roles of points on the path and of the interpolation points.</p>
<example-with-output title="Single Bezier spline" internal-id="example/one-segment">
<image pdf="tutorial-one-segment_3.pdf" jpg="tutorial-one-segment_y_big.jpg" />
<source file=<!--#expand-next-string-->"$(EXAMPLES)/doc/tutorial-one-segment.shape">
<![CDATA[<!--#include virtual="$(EXAMPLES)/doc/tutorial-one-segment.shape" -->]]>
</source>
<caption>
	<p>Bezier splines.  Points on the path are marked with circles, and interpolation points are marked with a cross and a dashed line showing which terminal point it belongs to.  Absence of an interpolation point — that is, an interpolation point which is logically coinciding with the terminal point it is associated with — is simply represented by not marking the interpolation point at all.  Note that the absence of an interpolation point is the limiting case as the interpolation point approaches the terminal point.</p>
</caption>
</example-with-output>

<p>In the next example we will see how to connect spline segments, and how offsets are interpreted.</p>
<example-with-output title="Connected Bezier splines" internal-id="example/bezier-connected">
<image pdf="tutorial-bezier-connected_3.pdf" jpg="tutorial-bezier-connected_y_big.jpg" />
<source file=<!--#expand-next-string-->"$(EXAMPLES)/doc/tutorial-bezier-connected.shape">
<![CDATA[<!--#include virtual="$(EXAMPLES)/doc/tutorial-bezier-connected.shape" -->]]>
</source>
<caption>
	<p>Bezier splines.  Points on the path are marked with circles, and interpolation points are marked with a cross and a dashed line showing which terminal point it belongs to.</p>
</caption>
</example-with-output>
</body>
</section><!-- End of basics/paths -->

<section id="basics/path-painting">
<title>Painting paths</title>
<body>
<p>You are already familiar with one of the path-painting functions, namely <binding name="stroke" />.  A similar function, <binding name="fill" />, will fill the path with paint instead of stroking it.  The following example also shows how to put an arrowhead on the path while stroking it.</p>
<example-with-output title="Path-painting" internal-id="example/path-painting">
<image pdf="tutorial-path-painting_3.pdf" jpg="tutorial-path-painting_y_big.jpg" />
<source file=<!--#expand-next-string-->"$(EXAMPLES)/doc/tutorial-path-painting.shape">
<![CDATA[<!--#include virtual="$(EXAMPLES)/doc/tutorial-path-painting.shape" -->]]>
</source>
<caption>
	<p>Filling, stroking, and stroking a path with an arrow head.</p>
</caption>
</example-with-output>
<p>Things to note:</p>
<ol>
<li><p>The arrowheads are defined in a <str-Shapes /> <em>extension</em> file.  If your <str-Shapes /> compiler has the path <filename>/usr/local/bin/shapes</filename>, then the extension files are typically located in <filename>/usr/local/share/shapes/extenions/</filename>.</p></li>
<li><p>Functions can take <em>named arguments</em>, and here the argument called <arg name="head" /> is some kind of object which defines what the arrowhead shall look like.</p></li>
<li><p>As you might have guessed, <binding name="stroke" /> also takes an argument called <arg name="tail" />.</p></li>
</ol>
</body>
</section><!-- End of basics/path-painting -->

<section id="basics/colors">
<title>Changing graphics parameters, such as color</title>
<body>
<p>Until now, all our drawings have been black on white, and all strokes of the default width <physical><scalar>1</scalar><unit>bp</unit></physical>.  In <str-PDF /> such properties are part of the <em>graphics state</em>, and <str-Shapes /> gives you control over these parameters via dynamic variables; just like <dynvar name="defaultunit" /> has an impact on how smooth paths come out, <dynvar name="width" /> controls how thick the lines coming from <binding name="stroke" /> are.</p>
<p>As usual, we use an example to show what the most important parameters are called, and how to set them.</p>
<example-with-output title="Graphics-params" internal-id="example/graphics-params">
<image pdf="tutorial-graphic-params_3.pdf" jpg="tutorial-graphics-params_y_big.jpg" />
<source file=<!--#expand-next-string-->"$(EXAMPLES)/doc/tutorial-graphics-params.shape">
<![CDATA[<!--#include virtual="$(EXAMPLES)/doc/tutorial-graphics-params.shape" -->]]>
</source>
<caption>
	<p>Changing parameters in the <str-PDF /> graphics state, such as stroking and non-stroking (that is, fill) color, dashpattern, <abbr-etc />.</p>
</caption>
</example-with-output>
<p>Things to note:</p>
<ol>
<li><p>The various ways several dynamic bindings can be combined to one set of bindings, including using the function <binding name="bindings" /> and inserting the empty set of bindings <binding name="nillbind" /> explicitly to make it one operator <operator name="&amp;" /> per binding.</p></li>
</ol>
</body>
</section><!-- End of basics/colors -->

<section id="basics/final-comments">
<title>Final comments</title>
<body>
<p>By now you know how to construct the most important basic elements that constitute the visual contents of a page.  Thus you are ready to use <str-Shapes /> as a meta-language for <str-PDF /> — indeed, the first name of the language was <em>MetaPDF</em> — but that is not what <str-Shapes /> is meant for.  <str-Shapes /> is all about <em>how</em> you put these elements on the page, and to this end you need to learn more about what programming in <str-Shapes /> is like.</p>
</body>
</section><!-- End of basics/final-comments -->

</section><!-- End of chap-basics -->
