/** This file is part of Shapes.
 **
 ** Shapes is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** any later version.
 **
 ** Shapes is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with Shapes.  If not, see <http://www.gnu.org/licenses/>.
 **
 ** Copyright 2008 Henrik Tidefelt
 **/

##needs circle
##needs arrowheads

intersectionCircle: \ pth1 pth2 →
  ( @stroking:RGB_RED | [stroke [shift [intersection pth1 pth2].p] [] [circle 2mm]] )

•page << [shift (0cm,4cm)] [] (TeX `\parbox{4cm}{Lines start at black circles, and at their first intersection there's a red circle.}´)

|** pth1straight: (0cm,0cm)--(3cm,4cm)
|** |** pth1curved: (0cm,0cm)>(1%c^0°)--(3cm,4cm)
|** pth1curved: (0cm,0cm)>(1cm,0cm)--(4cm,4cm)

|** pth2straight: (1cm,~2cm)--(2cm,5cm)
|** |** pth2curved: (1cm,~2cm)>(1%c^0°)--(2cm,5cm)
|** pth2curved: (3cm,0cm)>(2cm,0cm)--(0cm,4cm)

|** •page << [stroke pth1straight]
|** •page << [stroke pth1curved]
|** •page << [stroke pth2straight]
|** •page << [stroke pth2curved]

|** •page << [intersectionCircle pth1straight pth2straight]
|** •page << [intersectionCircle pth1straight pth2curved]
|** •stdout << `t: ´ << [intersection pth1curved pth2straight].time << `¢n´
|** •page << [intersectionCircle pth1curved pth2straight]
|** •page << [intersectionCircle pth1curved pth2curved]

|** pth3faraway: (5cm,5cm)>(5cm,6cm)--(7cm,7cm)
|** •page << [stroke pth3faraway]

|** /** This will break the program by means of the default @handler_NoIntersection: **/
|** |** •page << [intersectionCircle pth1curved pth3faraway]

|** /** This will draw nothing, since the handler returns NULL to the insertion continuation. **/
|** •page << (continuation cont
|**       @handler_NoIntersection: \ pth1 pth2 → (continue cont NULL)
|**       |
|**       [intersectionCircle pth1curved pth3faraway]
|**     )

randPath: \ n •state →
 [scale 5] []
  [[range '1 n].foldsl
   \ pile e •st →  pile--( ^ )<(1cm*[random2D •st])>( 2mm * (1+[random1D •st]) ^ 180°*[random1D •st] )
   emptypath •state]

{
  •rand: [newRandom (•time)]
  sh: [shift (5cm,0cm)]
  pth: sh [] [randPath '10 •rand]
  •page << @stroking:RGB_RED | [stroke pth head: MetaPostArrow]
|**  •page << @stroking:[gray 0.7] | [stroke controlling [] pth]

  •page <<
  (
  @width: 0.2bp
  |
  [[range '1 '10].foldsl
   \ pile e •st →
   {
    pth2: sh [] [randPath '4 •st]

    pile
    & [stroke pth2 tail: \ p → (> picture:[stroke [shift p.begin.p][][circle 3mm]]  cut:0mm <)]
|** & ( @stroking:[gray 0.7] | [stroke controlling [] pth2] )
    & (escape_continuation cont
      @handler_NoIntersection: ( \ pth1 pth2 → (escape_continue cont [stroke [shift pth1.begin.p][][circle 4mm]]) )
      |
      [intersectionCircle pth2 pth]
      )
		>> [debuglog_after ( newString << `pth: ´ << [pth 2].p << `>(´ << [pth 2].v << `^´ << [angle [pth 2].T]/1° << `°)¢n´ ) ...]
    >> [debuglog_after ( newString << `pth: ´ << [pth 3].p << `>(´ << [pth 3].rv << `^´ << [angle [pth 3].rT]/1° << `°)¢n´ ) ...]
    >> [debuglog_after ( newString << `pth2: ´ << [pth2 0].p << `>(´ << [pth2 0].v << `^´ << [angle [pth2 0].T]/1° << `°)¢n´ ) ...]
    >> [debuglog_after ( newString << `pth2: ´ << [pth2 1].p << `>(´ << [pth2 1].rv << `^´ << [angle [pth2 1].rT]/1° << `°)¢n´ ) ...]
   }
   null
   •rand
  ])
}
