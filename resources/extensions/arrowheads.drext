metaPostArrow: \ p ahLength:void ahAngle:30° fillAsStroking:true .>
 (@blend:blend_NORMAL
  |
  { z: [p 0].p
    theLength: [if [typeof ahLength]==Void @width*5 ahLength]
    l: [min theLength 0.9*[abs p]]
    e: [p 0]--[p l]
    (>
      picture: @nonstroking:[if fillAsStroking @stroking @nonstroking]
               |
               [fill [[shift z]*[rotate ahAngle*0.5]*[shift ~z] e]--[reverse [[shift z]*[rotate ~ahAngle*0.5]*[shift ~z] e]]--cycle]
      cut: 2*@width
    <)
  }
 )

triangleArrow: \ p ahLength:void ahAngle:30° fillAsStroking:true .>
 (@blend:blend_NORMAL
  |
  { sl: [p 0]
    z: sl.p
    d: [angle sl.t]
    theLength: [if [typeof ahLength]==Void @width*5 ahLength]
    (>
      picture: @nonstroking:[if fillAsStroking @stroking @nonstroking]
               |
               [fill (z+[dir d - ahAngle/2]*theLength)--z--(z+[dir d + ahAngle/2]*theLength)--cycle]
      cut: 2*@width
    <)
  }
 )

##needs circle

twoCircles3DArrow:
{
  ztf: \ z0 .>
  {
    z: [normalized z0]
    x: [orthogonal z]
    y: [cross z x]
    [affinetransform3D x y z (0cm,0cm,0cm)]
  }

  \ p ahLength:void ahAngle:30° .>
    { z: [p 0]
      theLength: [if [typeof ahLength]==Void @width*5 ahLength]
      l: [min theLength*[cos ahAngle] 0.9*[abs p]]
      e: [p 0]--[p l]
      (>
        picture: [stroke [[shift [p 0.5*theLength*[cos ahAngle]].p]*[ztf [direction p 0.5*theLength*[cos ahAngle]]] [immerse [circle 0.5*theLength*[sin ahAngle]]]]]
                 &
		 [stroke [[shift [p theLength*[cos ahAngle]].p]*[ztf [direction p theLength*[cos ahAngle]]] [immerse [circle theLength*[sin ahAngle]]]]]
        cut: 0mm
      <)
    }
}

metaPostArrow3D: \ normal p ahLength:void ahAngle:30° .>
  { z: [p 0].p
    theLength: [if [typeof ahLength]==Void @width*5 ahLength]
    l: [min theLength 0.9*[abs p]]
    e: [p 0]--[p l]
    rev: [reverse [[shift z]*[rotate3D dir:normal angle: ~ahAngle*0.5]*[shift ~z] e]]
    (>
      picture: [fill [[shift z]*[rotate3D dir:normal angle:ahAngle*0.5]*[shift ~z] e]--rev--cycle]
               &
               [fill [[shift z]*[rotate3D dir:normal angle:ahAngle*0.5]*[shift ~z] e]--[reverse [[shift z]*[rotate3D dir:normal angle: ~ahAngle*0.5]*[shift ~z] e]]--cycle]
      cut: 2*@width
    <)
  }

triangleArrow3D: \ p normal:(0,0,1) ahLength:void ahAngle:30° .>
  { sl: [p 0]
    z: sl.p
    l: [if [typeof ahLength]==Void @width*5 ahLength]
    rotDir1: [cross sl.t [orthogonal sl.t]]
    (>
      picture:
        { rotDir: rotDir1
          fill [] [shift z] [] ( (0m,0m,0m)--([rotate3D dir:rotDir angle:ahAngle*0.5][](l*sl.t))--([rotate3D dir:rotDir angle:~ahAngle*0.5][](l*sl.t))--cycle ) }
	&
	{ rotDir: [cross sl.t rotDir1]
          fill [] [shift z] [] ( (0m,0m,0m)--([rotate3D dir:rotDir angle:ahAngle*0.5][](l*sl.t))--([rotate3D dir:rotDir angle:~ahAngle*0.5][](l*sl.t))--cycle ) }
      cut: 2*@width
    <)
  }
