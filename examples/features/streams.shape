/** This file is part of Shapes.
 **
 ** Shapes is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** any later version.
 **
 ** Shapes is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with Shapes.  If not, see <http://www.gnu.org/licenses/>.
 **
 ** Copyright 2008 Henrik Tidefelt
 **/

/**
fibsFrom: \ n1 n2 .>
{ 
  stderr << `eval:´ << n1 << `, ´ << n2 << `¢n´
  [cons n2 [fibsFrom n2 n1+n2]]
}

fib: [fibsFrom 0 1]
**/

streamadd: \ s1 s2 .> [cons s1.car+s2.car [streamadd s1.cdr s2.cdr]]

nth: \ lst n .> [if n == 0 lst.car [nth lst.cdr n-1]]


fib : [cons 0 [cons 1 [streamadd fib fib.cdr]]]

•stdout << [nth fib 0] << `¢n´
•stdout << [nth fib 1] << `¢n´
•stdout << [nth fib 2] << `¢n´
•stdout << [nth fib 3] << `¢n´



|** Another interesting stream is a stream of random numbers.  This pinpoints the fact that the whole sequence is given once the seed has been set.

randoms:
{
  helper: \ •state .> [cons [random1D •state] [helper •state]]

  |** Remember that the state must be named like this; it cannot be generated as part of the expression below.
  •rand: [newRandom (•time)]
  [helper •rand]
}

•stdout << [nth randoms 0] << `  ´ << [nth randoms 1] << `  ´ << [nth randoms 2] << `  ´ << [nth randoms 3] << `¢n´
•stdout << [nth randoms 0] << `  ´ << [nth randoms 1] << `  ´ << [nth randoms 2] << `  ´ << [nth randoms 3] << `¢n´

•page << [stroke (0cm,0cm)--(1cm,1cm)]
