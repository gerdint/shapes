<section id="bindings/functions">
<title>Functions</title>
<top>
<p>These are the functions!</p>

<p>After all, <str-Shapes /> is a special-purpose language aimed at the production of graphics.  Hence, functions for path drawing, creation of affine transforms, and path computations are a very important part of the language.</p>

<p>Remember <binding name="immerse" /> and <binding name="facing" />, and in particular the <paramname>scale</paramname> and <paramname>distort</paramname> options to <binding name="facing" />.  The following is quite nice:
</p>
<pre>
facing: [../facing scale:true distort:true ...]
</pre>
</top>

<system-binding identifier="affinetransform">
	<function>
		<case constructor-of="Transform">
			<arguments>
				<arg>
					<type><named-type name="FloatPair" /></type>
				</arg>
				<arg>
					<type><named-type name="FloatPair" /></type>
				</arg>
				<arg>
					<type><named-type name="Coords" /></type>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>Construct transform from multiplier for x and y coordinates, followed by a shift.</description>
		</case>
	</function>
</system-binding>

<system-binding identifier="affinetransform3D">
	<function>
		<case constructor-of="Transform3D">
			<arguments>
				<arg>
					<type><named-type name="FloatTriple" /></type>
				</arg>
				<arg>
					<type><named-type name="FloatTriple" /></type>
				</arg>
				<arg>
					<type><named-type name="FloatTriple" /></type>
				</arg>
				<arg>
					<type><named-type name="Coords3D" /></type>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>Construct transform from multiplier for x, y, and z coordinates, followed by a shift.</description>
		</case>
	</function>
</system-binding>

<system-binding identifier="shift">
	<function>
		<case constructor-of="Transform">
			<arguments>
				<arg>
					<type><named-type name="Coords" /></type>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>Construct transform.</description>
		</case>
		<case constructor-of="Transform3D">
			<arguments>
				<arg>
					<type><named-type name="Coords3D" /></type>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>Construct transform.</description>
		</case>
	</function>
</system-binding>

<system-binding identifier="rotate">
	<function>
		<case constructor-of="Transform">
			<arguments>
				<arg identifier="angle">
					<type><named-type name="Float" /></type>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>Construct transform.</description>
		</case>
	</function>
</system-binding>

<system-binding identifier="rotate3D">
	<function>
		<case constructor-of="Transform3D">
			<arguments>
				<arg identifier="dir">
					<type><named-type name="FloatTriple" /></type>
				</arg>
				<arg identifier="angle">
					<type><named-type name="Float" /></type>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>Construct rotation transform about given direction.</description>
		</case>
	</function>
</system-binding>

<system-binding identifier="scale">
	<function>
		<case constructor-of="Transform">
			<arguments>
				<arg identifier="r">
					<type><named-type name="Float" /></type>
					<default>1</default>
				</arg>
				<arg identifier="x">
					<type><named-type name="Float" /></type>
					<default>1</default>
				</arg>
				<arg identifier="y">
					<type><named-type name="Float" /></type>
					<default>1</default>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>Construct transform that scales x by <varname>r</varname><char-cdot /><varname>x</varname>, and y by <varname>r</varname><char-cdot /><varname>y</varname>.</description>
		</case>
	</function>
</system-binding>

<system-binding identifier="scale3D">
	<function>
		<case constructor-of="Transform3D">
			<arguments>
				<arg identifier="r">
					<type><named-type name="Float" /></type>
					<default>1</default>
				</arg>
				<arg identifier="x">
					<type><named-type name="Float" /></type>
					<default>1</default>
				</arg>
				<arg identifier="y">
					<type><named-type name="Float" /></type>
					<default>1</default>
				</arg>
				<arg identifier="z">
					<type><named-type name="Float" /></type>
					<default>1</default>
				</arg>
			</arguments>
			<dynamic-references></dynamic-references>
			<description>Construct transform that scales x by <varname>r</varname><char-cdot /><varname>x</varname>, and similarly with y and z.</description>
		</case>
	</function>
</system-binding>

<system-binding identifier="stroke">
	<function>
		<case constructor-of="Drawable">
			<arguments>
				<arg identifier="path">
					<type><named-type name="Path" /></type>
				</arg>
				<arg identifier="head">
					<default><binding name="NO_ARROW" /></default>
					<type>(<named-type name="Path" /> → (&gt; <varname>picture</varname>::<named-type name="Drawable" /> <varname>cut</varname>::<named-type name="Length" /> &lt;) )</type>
				</arg>
				<arg identifier="tail">
					<default><binding name="NO_ARROW" /></default>
					<type>(<named-type name="Path" /> → (&gt; <varname>picture</varname>::<named-type name="Drawable" /> <varname>cut</varname>::<named-type name="Length" /> &lt;) )</type>
				</arg>
			</arguments>
			<dynamic-references><dynvar name="width" /> <dynvar name="stroking" /> <dynvar name="dash" /> <dynvar name="cap" /> <dynvar name="join" /> <dynvar name="miterlimit" /></dynamic-references>
			<description>
				<p>Paints the <varname>path</varname> argument by stroking it.  Properties such as color (<dynvar>stroking</dynvar>), width, et cetera are taken from the dynamic environment.</p>
				<p>The arguments <varname>head</varname> and <varname>tail</varname> define arrowheads at the corresponding ends of the stroke.  An arrowhead is defined by a function that takes the path as argument, and returns a tuple with fields <varname>picture</varname> and <varname>cut</varname>.  Here, <varname>picture</varname> shall be the grahpics that is the actual arrowhead, while <varname>cut</varname> tells how much the stroke shall be shortened to not interfere with the arrowhead.  Note that the arrowhead and the stroke usually overlap, but that it is not desirable that the stroke goes all the way to the point of the arrowhead.</p>
			</description>
		</case>
	</function>
</system-binding>

<system-binding identifier="fill">
	<function>
		<case constructor-of="Drawable">
			<arguments>
				<arg identifier="path">
					<type><named-type name="Path" /></type>
				</arg>
			</arguments>
			<dynamic-references><dynvar name="nonstroking" /></dynamic-references>
			<description>
				<p>Paints the <varname>path</varname> (that shall be closed) argument by filling it.  The fill color is taken from <dynvar>nonstroking</dynvar>.</p>
			</description>
		</case>
		<case constructor-of="Drawable3D">
			<arguments>
				<arg identifier="path">
					<type><named-type name="Path3D" /></type>
				</arg>
				<arg identifier="tiebreaker">
					<default>0</default>
					<type><named-type name="Length" /></type>
				</arg>
			</arguments>
			<dynamic-references><dynvar name="nonstroking" /></dynamic-references>
			<description>
				<p>Paints the <varname>path</varname> (that shall be closed) argument by filling it.  The fill color is taken from <dynvar>nonstroking</dynvar>.</p>
				<p></p>
			</description>
		</case>
	</function>
</system-binding>

</section>
